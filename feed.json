{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "❤Love Arrow Shoot!❤",
    "icon": "http://lovearrowshoot.github.io/images/favicon.ico",
    "description": "本博客纯属个人爱好制作，主要用于存放笔记",
    "home_page_url": "http://LoveArrowShoot.github.io",
    "items": [
        {
            "id": "http://lovearrowshoot.github.io/hexo/hexo-fullscreen/",
            "url": "http://lovearrowshoot.github.io/hexo/hexo-fullscreen/",
            "title": "Hexo-shoka自定义",
            "date_published": "2023-06-30T08:58:14.000Z",
            "content_html": "<h1 id=\"背景图全屏\"><a class=\"anchor\" href=\"#背景图全屏\">#</a> 背景图全屏</h1>\n<h2 id=\"修改stylus\"><a class=\"anchor\" href=\"#修改stylus\">#</a> 修改 Stylus</h2>\n<p>进入 themes\\shoka\\source\\css\\_common\\outline\\header\\ 目录</p>\n<p>在 brand.styl 文件的 #brand 内将 height 修改为 80vh</p>\n<p>在 header.styl 文件的 #header 内将 height 修改为 100vh</p>\n<p>在 image.styl 文件的 #imgs 内将 height 修改为 100vh</p>\n<p>在 tool.styl 文件的 #tool 内将 top 修改为 90vh</p>\n<p>在 waves.styl 文件的 #waves 内</p>\n<blockquote>\n<p>将 margin-bottom 修改为 bottom: 0</p>\n</blockquote>\n<blockquote>\n<p>增添一行 z-index: 4</p>\n</blockquote>\n<blockquote>\n<p>position: relative 修改为 position: absolute</p>\n</blockquote>\n<h2 id=\"修改nunjucks\"><a class=\"anchor\" href=\"#修改nunjucks\">#</a> 修改 nunjucks</h2>\n<p>进入 themes\\shoka\\layout\\_partials\\ 目录</p>\n<p>在 layout.njk 文件 61 行的  <code>&lt;/header&gt;</code>  标签移动到 75 行  <code>&lt;/div&gt;</code>  和  <code>&lt;main&gt;</code>  之间</p>\n<h2 id=\"图片网格效果\"><a class=\"anchor\" href=\"#图片网格效果\">#</a> 图片网格效果</h2>\n<p>进入 themes\\shoka\\source\\css\\_common\\outline\\header\\ 目录</p>\n<p>修改 header.styl 文件的 #header 标签内容</p>\n<pre><code class=\"language-Stylus\">#header &#123;\n  &amp;::before&#123;\n    background: url(https://cdn.jsdelivr.net/gh/lavender816/CDN@1.8/img/dot.jpg);\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: -4;\n    background-attachment: fixed;\n  &#125;\n  margin: 0 auto;\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  text-shadow: 0rem .2rem .3rem alpha(#000, .5);\n  color: var(--header-text-color);\n\n  a:hover &#123;\n    color: currentColor;\n  &#125;\n&#125;\n</code></pre>\n<h1 id=\"首页文章摘要\"><a class=\"anchor\" href=\"#首页文章摘要\">#</a> 首页文章摘要</h1>\n<p>进入 themes\\shoka\\source\\css\\_common\\components\\pages\\home.styl<br />\n 将内容修改如下</p>\n<pre><code class=\"language-Stylus\">$item &#123;\n  position: relative;\n  color: inherit;\n  width: calc(50% - 2rem);\n  min-width: calc(50% - 2rem);\n  height: 14rem;\n  margin: 1rem;\n  opacity: 0;\n\n  &amp;.show &#123;\n    @extend .slide-up-big-in;\n    opacity: 1;\n  &#125;\n\n  +mobile() &#123;\n    width: calc(100% - 1rem) !important;\n    min-width: calc(100% - 1rem) !important;\n    margin: 1rem .5rem !important;\n  &#125;\n&#125;\n\n.index.wrap &#123;\n  .btn &#123;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    padding: .3rem 1rem;\n    border-radius: 1rem 0;\n    color: var(--grey-0);\n    background-image: linear-gradient(to right, var(--color-pink) 0, var(--color-orange) 100%);\n\n    &amp;::before &#123;\n      position: absolute;\n      display: block;\n      content: '';\n      height: calc(100% - 1rem);\n      width: calc(100% - 1rem);\n      border-radius: 5rem;\n      left: .5rem;\n      top: .8rem;\n      box-shadow: 0 0 .6rem .6rem var(--color-pink-a3);\n      background-color: var(--color-pink-a3);\n      z-index: -1;\n    &#125;\n\n    &amp;:hover &#123;\n      transform: translateZ(2.5rem);\n    &#125;\n\n    &amp;:hover::before &#123;\n      transform: translateZ(-2.5rem);\n    &#125;\n  &#125;\n\n  .meta &#123;\n    font-size: $font-size-smaller;\n    color: var(--grey-5);\n\n    .ic &#123;\n      margin-right: .0625rem;\n    &#125;\n\n    .item + .item &#123;\n      margin-left: .625rem;\n    &#125;\n\n    &amp;.footer &#123;\n      position: absolute;\n      bottom: .5rem;\n      max-width: calc(100% - 7rem);\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      justify-content: flex-start;\n\n      span &#123;\n        margin-right: .5rem;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n.cards &#123;\n  display: flex;\n  margin: 0 auto;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n  &amp;.hide .item &#123;\n    display: none;\n  &#125;\n\n  .item &#123;\n\n    @extend $item;\n    perspective: 62.5rem;\n    &amp;.show &#123;\n      display: block !important;\n    &#125;\n\n    .cover,\n    .info &#123;\n      position: absolute;\n      the-flex();\n      border-radius: .375rem;\n      height: 100%;\n      width: 100%;\n      backface-visibility: hidden;\n      transform-style: preserve-3d;\n      transition: ease-in-out 600ms;\n    &#125;\n\n    .cover &#123;\n      background-position: center;\n      background-size: cover;\n      padding: .5rem 1rem;\n      font-size: $font-size-medium;\n      color: var(--header-text-color);\n      overflow: hidden;\n      transform: rotateY(0deg);\n      background-image: unquote(hexo-config('index.cover'));\n\n      .title &#123;\n        margin: 0rem;\n        white-space: normal;\n        text-align: center;\n      &#125;\n\n      &amp;::before &#123;\n        position: absolute;\n        display: block;\n        content: '';\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-image: linear-gradient(135deg, #434343 0%, black 100%);\n        opacity: .25;\n        z-index: $zindex-0;\n      &#125;\n\n      span &#123;\n        font-size: $font-size-smallest;\n        position: absolute;\n        right: .9375rem;\n        top: .625rem;\n        padding: 0 .3125rem;\n        border-radius: .3125rem;\n        box-shadow: 0 0rem .3125rem .0625rem rgba(0,0,0,.6);\n        background: rgba(0,0,0,.5);\n      &#125;\n    &#125;\n\n\n    .info &#123;\n      background-color: var(--grey-0);\n      transform: rotateY(-180deg);\n      padding: 1rem 1.5rem 4rem;\n      justify-content: space-between;\n\n      +mobile() &#123;\n        padding: 1rem 1rem 4rem;\n      &#125;\n\n      .ribbon &#123;\n        left: -2.5rem;\n        margin-bottom: .8rem;\n        max-width: calc(100% + 2rem);\n        +mobile() &#123;\n          left: -2rem;\n        &#125;\n      &#125;\n    &#125;\n\n    &amp;:nth-child(even) .info &#123;\n      transform: rotateY(180deg);\n    &#125;\n\n    &amp;.active &#123;\n      .cover &#123;\n        transform: rotateY(180deg);\n      &#125;\n\n      .info &#123;\n        transform: rotateY(0deg);\n        box-shadow: 0 0 2rem var(--box-bg-shadow);\n      &#125;\n    &#125;\n\n    &amp;:nth-child(even).active &#123;\n      .cover &#123;\n        transform: rotateY(-180deg);\n      &#125;\n    &#125;\n\n    .title &#123;\n      .ic &#123;\n        font-size: 80%;\n      &#125;\n    &#125;\n\n    ul.posts &#123;\n      display: flex;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-content: baseline;\n      min-height: 5rem;\n      overflow: hidden;\n\n      li &#123;\n        width: 45%;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        color: var(--primary-color);\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n.segments &#123;\n  the-flex();\n\n  &gt; .item &#123;\n    @extend $item;\n\n    display: flex;\n    border-radius: .625rem;\n\n    width: calc(100% - 2rem);\n    min-width: calc(100% - 2rem);\n\n    shadow-box(false);\n    the-transition();\n\n\n    +mobile() &#123;\n      flex-direction: column;\n      height: fit-content;\n      max-height: fit-content;\n    &#125;\n\n    &amp;:hover &#123;\n      box-shadow: 0 0 2rem var(--box-bg-shadow);\n\n      .cover &#123;\n        filter: brightness(.3);\n      &#125;\n\n      .cover img &#123;\n        transform: scale(1.25) rotate(2deg);\n      &#125;\n\n      .info &#123;\n        width: 75%;\n        +mobile()&#123;\n          width: 100%;\n        &#125;\n      &#125;\n\n      .info h3&#123;\n        margin: .625rem 0;\n        color: var(--color-blue);\n      &#125;\n\n      .excerpt &#123;\n        opacity: 1;\n      &#125;\n    &#125;\n  &#125;\n\n  .cover &#123;\n    width: 50%;\n    margin-right: 1.5rem;\n    clip-path: polygon(0 0, 92% 0%, 100% 100%, 0% 100%);\n    border-radius: .625rem 0 0 .625rem;\n    overflow: hidden;\n    the-transition();\n\n    +mobile() &#123;\n      width: 100%;\n      height: 14rem;\n      margin: auto;\n      clip-path: polygon(0 0, 100% 0, 100% 92%, 0 100%);\n      border-radius: .625rem .625rem 0 0;\n    &#125;\n\n    img &#123;\n      object-fit: cover;\n      width: 100%;\n      height: 100%;\n    &#125;\n  &#125;\n\n  .info &#123;\n    position: relative;\n    width: 50%;\n    padding: 1rem 1.5rem 3rem 0;\n    perspective: 62.5rem;\n    the-transition();\n\n    +mobile() &#123;\n      width: 100%;\n      height: 14rem;\n      padding: 0rem 1rem 3rem;\n    &#125;\n\n    .meta &#123;\n      display: flex;\n      justify-content: flex-end;\n      margin: 0;\n\n      +mobile() &#123;\n        .item:not(:first-child) &#123;\n          display: none;\n        &#125;\n      &#125;\n    &#125;\n\n    h3 &#123;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      margin: 3.525rem 0 0 0;\n      color: var(--primary-color);\n      the-transition-margin();\n    &#125;\n\n    .excerpt &#123;\n      overflow: hidden;\n      font-size: $font-size-small;\n      max-height: 5rem;\n      display: -webkit-box;\n      -webkit-box-orient: vertical;\n      -webkit-line-clamp: 3;\n      text-overflow: ellipsis;\n      opacity: 0;\n      pointer-events: none;\n      the-transition();\n    &#125;\n\n  &#125;\n\n\n  &gt; .item:nth-child(even) &#123;\n    flex-direction: row-reverse;\n\n    +mobile() &#123;\n      flex-direction: column;\n    &#125;\n\n    .cover &#123;\n      margin-right: auto;\n      margin-left: 1.5rem;\n      clip-path: polygon(0 0%, 100% 0%, 100% 100%, 8% 100%);\n      border-radius: 0rem .625rem .625rem 0;\n\n      +mobile() &#123;\n        width: 100%;\n        margin: auto;\n        clip-path: polygon(0 0,100% 0,100% 100%,0 92%);\n        border-radius: .625rem .625rem 0 0;\n      &#125;\n    &#125;\n\n    .info &#123;\n      padding: 1rem 0 3rem 1.5rem;\n\n      +mobile() &#123;\n        padding: 0rem 1rem 3rem;\n      &#125;\n\n      .meta &#123;\n        justify-content: flex-start;\n      &#125;\n    &#125;\n\n    .btn &#123;\n      left: 0;\n      right: auto;\n      border-radius: 0 1rem;\n      background-image: linear-gradient(to right, var(--color-orange) 0, var(--color-pink) 100%);\n    &#125;\n\n    .meta.footer &#123;\n      right: .5rem;\n      justify-content: flex-start;\n    &#125;\n\n    &amp;:hover &#123;\n      .cover img &#123;\n        transform: scale(1.25) rotate(-2deg);\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>进入 themes\\shoka\\source\\css\\_mixins.styl 中增加如下函数</p>\n<pre><code class=\"language-Stylus\">the-transition-margin(duration = .3s, function = ease, delay = 0s, property = margin) &#123;\n\ttransition:property duration function delay;\n&#125;\n</code></pre>\n<h1 id=\"背景图随鼠标滚动发生位移\"><a class=\"anchor\" href=\"#背景图随鼠标滚动发生位移\">#</a> 背景图随鼠标滚动发生位移</h1>\n<p>找到 themes\\shoka\\source\\js\\_app\\global.js</p>\n<p>20 行左右新增</p>\n<p>var imgMover = $('#imgs');</p>\n<p>188 行左右新增</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> oVal <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span> <span class=\"token operator\">*</span> window<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token operator\">/</span> contentVisibilityHeight<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oVal <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\toVal <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>imgMover<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">'translate3d(0,'</span> <span class=\"token operator\">+</span> oVal <span class=\"token operator\">+</span> <span class=\"token string\">'vh,0)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>imgMover<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>webkitTransform  <span class=\"token operator\">=</span> <span class=\"token string\">'translate3d(0,'</span> <span class=\"token operator\">+</span> oVal <span class=\"token operator\">+</span> <span class=\"token string\">'vh,0)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>imgMover<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>msTransform <span class=\"token operator\">=</span> <span class=\"token string\">'translate3d(0,'</span> <span class=\"token operator\">+</span> oVal <span class=\"token operator\">+</span> <span class=\"token string\">'vh,0)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>imgMover<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>OTransform  <span class=\"token operator\">=</span> <span class=\"token string\">'translate3d(0,'</span> <span class=\"token operator\">+</span> oVal <span class=\"token operator\">+</span> <span class=\"token string\">'vh,0)'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 themes\\shoka\\source\\js_app\\pjax.js 文件大概 53 行新增</p>\n<p>imgMover = $('#imgs')</p>\n<h1 id=\"修改标签页显示\"><a class=\"anchor\" href=\"#修改标签页显示\">#</a> 修改标签页显示</h1>\n<p>要下班了，下次上班再弄</p>\n<h1 id=\"实现下拉小箭头\"><a class=\"anchor\" href=\"#实现下拉小箭头\">#</a> 实现下拉小箭头</h1>\n<p>进入 themes/shoka/source/js/_app 目录<br />\n在 global.js 17 行新增</p>\n<p>var angleBtn=$('#angle');</p>\n<p>在 pjax.js 20 行新增</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>angleBtn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    angleBtn <span class=\"token operator\">=</span> siteHeader<span class=\"token punctuation\">.</span><span class=\"token function\">createChild</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'angle'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">innerHTML</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;span>&lt;i class=\"ic i-angle-down\" aria-hidden=\"true\">&lt;/i>&lt;/span>'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> angleBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>headertopdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 sidebar.js 220 行新增</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">headertopdown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">pageScroll</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 themes-&gt;shoka-&gt;source-&gt;css-&gt;_common-&gt;outline-&gt;header-&gt;header.styl 中最后 (@import... 之前) 新增</p>\n<pre><code class=\"language-Stylus\">/* 首页下拉箭头 */\n \n#angle &#123;\n    position: absolute;\n    bottom: 10vh;\n    left: 50%;\n    cursor: pointer;\n    z-index: 5;\n    transform: translateX(-50%);\n&#125;\n\n@media (max-width: 860px) &#123;\n    #angle &#123;\n        bottom: 8vh;\n    &#125;\n&#125;\n\n#angle i &#123;\n    font-size: 35px;\n    color: #fff;\n    @extend .up-down;\n&#125;\n</code></pre>\n",
            "tags": [
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/DP/DP/",
            "url": "http://lovearrowshoot.github.io/DP/DP/",
            "title": "设计模式详解",
            "date_published": "2023-06-30T07:08:06.000Z",
            "content_html": "<h1 id=\"六大原则\"><a class=\"anchor\" href=\"#六大原则\">#</a> 六大原则</h1>\n<h3 id=\"总原则开闭原则open-closed-principle\"><a class=\"anchor\" href=\"#总原则开闭原则open-closed-principle\">#</a> 总原则 —— 开闭原则（Open Closed Principle）</h3>\n<p>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等。</p>\n<h3 id=\"1-单一职责原则single-responsibility-principle\"><a class=\"anchor\" href=\"#1-单一职责原则single-responsibility-principle\">#</a> 1、单一职责原则（Single Responsibility Principle）</h3>\n<p>一个类应该只有一个发生变化的原因。不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，否则就应该把类拆分。</p>\n<h3 id=\"2-里氏替换原则liskov-substitution-principle\"><a class=\"anchor\" href=\"#2-里氏替换原则liskov-substitution-principle\">#</a> 2、里氏替换原则（Liskov Substitution Principle）</h3>\n<p>所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>里氏代换原则是对 “开 - 闭” 原则的补充。实现 “开闭” 原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<h3 id=\"3-依赖倒置原则dependence-inversion-principle\"><a class=\"anchor\" href=\"#3-依赖倒置原则dependence-inversion-principle\">#</a> 3、依赖倒置原则（Dependence Inversion Principle）</h3>\n<p>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。<br />\n2、抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n<p>面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>\n<h3 id=\"4-接口隔离原则interface-segregation-principle\"><a class=\"anchor\" href=\"#4-接口隔离原则interface-segregation-principle\">#</a> 4、接口隔离原则（Interface Segregation Principle）</h3>\n<p>1、客户端不应该依赖它不需要的接口。<br />\n2、类间的依赖关系应该建立在最小的接口上。</p>\n<p>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>\n<h3 id=\"5-迪米特法则最少知道原则law-of-demeter\"><a class=\"anchor\" href=\"#5-迪米特法则最少知道原则law-of-demeter\">#</a> 5、迪米特法则（最少知道原则）(Law of Demeter)</h3>\n<p>一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过 public 方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p>\n<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<h3 id=\"6-合成复用原则composite-reuse-principle\"><a class=\"anchor\" href=\"#6-合成复用原则composite-reuse-principle\">#</a> 6、合成复用原则（Composite Reuse Principle）</h3>\n<p>尽量使用对象组合 / 聚合，而不是继承关系达到软件复用的目的。<br />\n合成或聚合可以将已有对象纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能。</p>\n<h1 id=\"创建型模式\"><a class=\"anchor\" href=\"#创建型模式\">#</a> 创建型模式</h1>\n<h2 id=\"工厂方法\"><a class=\"anchor\" href=\"#工厂方法\">#</a> 工厂方法</h2>\n<p>工厂方法模式，是指定义一个用于创建对象的接口，让子类决定实例化哪一个类。使一个类的实例化延迟到其子类。</p>\n<p><img data-src=\"38b89bfd5d5f55e2e608954b4b30f58c.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCore</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 单核 A    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCoreA</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleCore</span></span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"SingleCore A\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 单核 B    </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCoreB</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleCore</span></span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"SingleCore B\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">virtual</span> SingleCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 生产 A 核的工厂    </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryA</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Factory</span></span>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    SingleCoreA<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> SingleCoreA<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 生产 B 核的工厂    </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryB</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Factory</span></span>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    SingleCoreB<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> SingleCoreB<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"抽象工厂\"><a class=\"anchor\" href=\"#抽象工厂\">#</a> 抽象工厂</h2>\n<p>抽象工厂模式为提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p><img data-src=\"b9b01dae250d230f8e91f95f1fe2f2c6.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单核    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCore</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCoreA</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleCore</span></span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Single Core A\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleCoreB</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleCore</span></span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Single Core B\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 多核    </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiCore</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiCoreA</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiCore</span></span>      </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Multi Core A\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiCoreB</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiCore</span></span>      </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Multi Core B\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 工厂    </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoreFactory</span>      </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">virtual</span> SingleCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">virtual</span> MultiCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateMultiCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 工厂 A，专门用来生产 A 型号的处理器    </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryA</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CoreFactory</span></span>    </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    SingleCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SingleCoreA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    MultiCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateMultiCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MultiCoreA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 工厂 B，专门用来生产 B 型号的处理器    </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryB</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CoreFactory</span></span>    </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    SingleCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateSingleCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SingleCoreB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    MultiCore<span class=\"token operator\">*</span> <span class=\"token function\">CreateMultiCore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MultiCoreB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"建造者\"><a class=\"anchor\" href=\"#建造者\">#</a> 建造者</h2>\n<p>建造者是一种创建型设计模式，使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p>\n<p><img data-src=\"3687615a19a7c11839c5a7fb034356d1.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Builder</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 构造瘦人  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThinBuilder</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin body\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin head\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin leftarm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin rightarm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin leftleg\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build thin rightleg\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 构造胖人  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FatBuilder</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Builder</span></span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat body\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat head\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat leftarm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat rightarm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildLeftLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat leftleg\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">BuildRightLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"build fat rightleg\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 构造的指挥官  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Director</span>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Builder <span class=\"token operator\">*</span>m_pBuilder<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">Director</span><span class=\"token punctuation\">(</span>Builder <span class=\"token operator\">*</span>builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_pBuilder <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildHead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildLeftArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildRightArm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildLeftLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        m_pBuilder<span class=\"token operator\">-></span><span class=\"token function\">BuildRightLeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    FatBuilder thin<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    Director <span class=\"token function\">director</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    director<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"原型\"><a class=\"anchor\" href=\"#原型\">#</a> 原型</h2>\n<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p><img data-src=\"53749cfcba658417250cae5d69442256.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 父类  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Resume</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> Resume<span class=\"token operator\">*</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResumeA</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resume</span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造函数  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ResumeA <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拷贝构造函数  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 析构函数  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ResumeA<span class=\"token operator\">*</span> <span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 克隆，关键所在  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 显示内容  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">ResumeA</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token class-name\">ResumeA</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> name<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">ResumeA</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ResumeA <span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>ResumeA<span class=\"token operator\">*</span> <span class=\"token class-name\">ResumeA</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">ResumeA</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ResumeA name : \"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//ResumeB 和 ResumeA 类似</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    Resume <span class=\"token operator\">*</span>r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Resume <span class=\"token operator\">*</span>r2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ResumeB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Resume <span class=\"token operator\">*</span>r3 <span class=\"token operator\">=</span> r1<span class=\"token operator\">-></span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Resume <span class=\"token operator\">*</span>r4 <span class=\"token operator\">=</span> r2<span class=\"token operator\">-></span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    r1<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> r2<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 删除 r1,r2  </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">delete</span> r1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> r2<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    r1 <span class=\"token operator\">=</span> r2 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 深拷贝所以对 r3,r4 无影响  </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    r3<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> r4<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">delete</span> r3<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> r4<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    r3 <span class=\"token operator\">=</span> r4 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"单例\"><a class=\"anchor\" href=\"#单例\">#</a> 单例</h2>\n<p>单例是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p>\n<p><img data-src=\"aec7623b038bb26dc13f1cc0a7e6b90a.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Singleton.h  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> Singleton<span class=\"token operator\">*</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> Singleton <span class=\"token operator\">*</span>singleton<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//Singleton.cpp  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Singleton<span class=\"token operator\">*</span> Singleton<span class=\"token double-colon punctuation\">::</span>singleton <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Singleton<span class=\"token operator\">*</span> <span class=\"token class-name\">Singleton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Singleton 存在子类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//Singleton.h  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once  </span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span>  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> Singleton<span class=\"token operator\">*</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 必须为保护，如果是私有属性，子类无法访问父类的构造函数  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> Singleton <span class=\"token operator\">*</span>singleton<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 唯一实例的指针  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//Singleton.cpp  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Singleton.h\"</span>  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SingletonA.h\"</span>  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"SingletonB.h\"</span>  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Singleton<span class=\"token operator\">*</span> Singleton<span class=\"token double-colon punctuation\">::</span>singleton <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Singleton<span class=\"token operator\">*</span> <span class=\"token class-name\">Singleton</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SingletonA\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SingletonA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">\"SingletonB\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">SingletonB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">else</span>   </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//SingletonA.h  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once  </span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Singleton.h\"</span>  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonA</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Singleton</span></span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须为友元类，否则父类无法访问子类的构造函数  </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"SingletonA\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>   <span class=\"token comment\">// 为保护属性，这样外界无法通过构造函数进行实例化  </span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">SingletonA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">//SingletonB.h  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once  </span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Singleton.h\"</span>  </span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonB</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Singleton</span></span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须为友元类，否则父类无法访问子类的构造函数  </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"SingletonB\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  <span class=\"token comment\">// 为保护属性，这样外界无法通过构造函数进行实例化  </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">SingletonB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"结构型模式\"><a class=\"anchor\" href=\"#结构型模式\">#</a> 结构型模式</h1>\n<h2 id=\"适配器\"><a class=\"anchor\" href=\"#适配器\">#</a> 适配器</h2>\n<p>适配器模式将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<p>举个例子，在 STL 中就用到了适配器模式。STL 实现了一种数据结构，称为双端队列，支持前后两段的插入与删除。STL 实现栈和队列时，没有从头开始定义它们，而是直接使用双端队列实现的。这里双端队列就扮演了适配器的角色。队列用到了它的后端插入，前端删除。而栈用到了它的后端插入，后端删除。</p>\n<p><img data-src=\"3bbb09968305c9eef7c878abe0b34046.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 双端队列  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Deque</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Deque push_back\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Deque push_front\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Deque pop_back\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Deque pop_front\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 顺序容器  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sequence</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 栈  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Sequence</span></span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> deque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> deque<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Deque deque<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双端队列  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 队列  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Sequence</span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> deque<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> deque<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Deque deque<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 双端队列  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Sequence <span class=\"token operator\">*</span>s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Sequence <span class=\"token operator\">*</span>s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    s1<span class=\"token operator\">-></span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> s1<span class=\"token operator\">-></span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    s2<span class=\"token operator\">-></span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> s2<span class=\"token operator\">-></span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">delete</span> s1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> s2<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"桥接\"><a class=\"anchor\" href=\"#桥接\">#</a> 桥接</h2>\n<p>桥接是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用</p>\n<p><img data-src=\"1b2960edb3c6045e27d9b9cdb3b87260.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 操作系统  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OS</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WindowOS</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">OS</span></span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"安装Window操作系统\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinuxOS</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">OS</span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"安装Linux操作系统\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnixOS</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">OS</span></span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"安装Unix操作系统\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 计算机  </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>OS <span class=\"token operator\">*</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DellComputer</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span></span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>OS <span class=\"token operator\">*</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> os<span class=\"token operator\">-></span><span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AppleComputer</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span></span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>OS <span class=\"token operator\">*</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> os<span class=\"token operator\">-></span><span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HPComputer</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span></span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>OS <span class=\"token operator\">*</span>os<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> os<span class=\"token operator\">-></span><span class=\"token function\">InstallOS_Imp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    OS <span class=\"token operator\">*</span>os1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WindowOS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    OS <span class=\"token operator\">*</span>os2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LinuxOS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    Computer <span class=\"token operator\">*</span>computer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">AppleComputer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    computer1<span class=\"token operator\">-></span><span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>os1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    computer1<span class=\"token operator\">-></span><span class=\"token function\">InstallOS</span><span class=\"token punctuation\">(</span>os2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"组合\"><a class=\"anchor\" href=\"#组合\">#</a> 组合</h2>\n<p>组合是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。</p>\n<p>比如一个集团公司，它有一个母公司，下设很多家子公司。不管是母公司还是子公司，都有各自直属的财务部、人力资源部、销售部等。对于母公司来说，不论是子公司，还是直属的财务部、人力资源部，都是它的部门。整个公司的部门拓扑图就是一个树形结构。</p>\n<p><img data-src=\"cf8abfe18471cc0593c697bede182c65.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Company</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Company</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Company</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Company <span class=\"token operator\">*</span>pCom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 具体公司  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteCompany</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Company</span></span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">ConcreteCompany</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Company</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ConcreteCompany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Company <span class=\"token operator\">*</span>pCom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_listCompany<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pCom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 位于树的中间，可以增加子树  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token operator\">&lt;</span>Company <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter<span class=\"token operator\">=</span>m_listCompany<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> m_listCompany<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 显示下层结点  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span>depth <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    list<span class=\"token operator\">&lt;</span>Company <span class=\"token operator\">*</span><span class=\"token operator\">></span> m_listCompany<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 具体的部门，财务部  </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FinanceDepartment</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Company</span></span>   </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">FinanceDepartment</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Company</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">FinanceDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只需显示，无限添加函数，因为已是叶结点  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">// 具体的部门，人力资源部  </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HRDepartment</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Company</span></span>    </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">HRDepartment</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Company</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">HRDepartment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只需显示，无限添加函数，因为已是叶结点  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    Company <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ConcreteCompany</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总公司\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Company <span class=\"token operator\">*</span>leaf1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">FinanceDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"财务部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Company <span class=\"token operator\">*</span>leaf2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">HRDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人力资源部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    root<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    root<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 分公司 A  </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    Company <span class=\"token operator\">*</span>mid1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ConcreteCompany</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分公司A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Company <span class=\"token operator\">*</span>leaf3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">FinanceDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"财务部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Company <span class=\"token operator\">*</span>leaf4<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">HRDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人力资源部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    mid1<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    mid1<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    root<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>mid1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 分公司 B  </span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    Company <span class=\"token operator\">*</span>mid2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">ConcreteCompany</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分公司B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    FinanceDepartment <span class=\"token operator\">*</span>leaf5<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">FinanceDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"财务部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    HRDepartment <span class=\"token operator\">*</span>leaf6<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">HRDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人力资源部\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    mid2<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    mid2<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>leaf6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    root<span class=\"token operator\">-></span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>mid2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    root<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">delete</span> leaf1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> leaf2<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">delete</span> leaf3<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> leaf4<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">delete</span> leaf5<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> leaf6<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">delete</span> mid1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> mid2<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">delete</span> root<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"装饰\"><a class=\"anchor\" href=\"#装饰\">#</a> 装饰</h2>\n<p>装饰是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为，动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。有时我们希望给某个对象而不是整个类添加一些功能。</p>\n<p><img data-src=\"5ed9eaae83dcd93f591b22535a75d622.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公共抽象类  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 具体的手机类  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">iPhone</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Phone</span></span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 手机名称  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">iPhone</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">iPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"的装饰\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 具体的手机类  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NokiaPhone</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Phone</span></span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">NokiaPhone</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">NokiaPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"的装饰\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 装饰类  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPhone</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Phone</span></span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Phone <span class=\"token operator\">*</span>m_phone<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 要装饰的手机  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">DecoratorPhone</span><span class=\"token punctuation\">(</span>Phone <span class=\"token operator\">*</span>phone<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_phone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_phone<span class=\"token operator\">-></span><span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 具体的装饰类  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPhoneA</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">DecoratorPhone</span></span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">DecoratorPhoneA</span><span class=\"token punctuation\">(</span>Phone <span class=\"token operator\">*</span>phone<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">DecoratorPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">DecoratorPhone</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">AddDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">AddDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"增加挂件\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 增加的装饰  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 具体的装饰类  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPhoneB</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">DecoratorPhone</span></span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">DecoratorPhoneB</span><span class=\"token punctuation\">(</span>Phone <span class=\"token operator\">*</span>phone<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">DecoratorPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">DecoratorPhone</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">AddDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">AddDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"屏幕贴膜\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 增加的装饰  </span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Phone <span class=\"token operator\">*</span>iphone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">NokiaPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6300\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    Phone <span class=\"token operator\">*</span>dpa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DecoratorPhoneA</span><span class=\"token punctuation\">(</span>iphone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 装饰，增加挂件  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    Phone <span class=\"token operator\">*</span>dpb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DecoratorPhoneB</span><span class=\"token punctuation\">(</span>dpa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 装饰，屏幕贴膜  </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    dpb<span class=\"token operator\">-></span><span class=\"token function\">ShowDecorate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">delete</span> dpa<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">delete</span> dpb<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">delete</span> iphone<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>装饰模式提供了更加灵活的向对象添加职责的方式。可以用添加和分离的方法，用装饰在运行时刻增加和删除职责。装饰模式提供了一种 “即用即付” 的方法来添加职责。它并不试图在一个复杂的可定制的类中支持所有可预见的特征，相反，你可以定义一个简单的类，并且用装饰类给它逐渐地添加功能。可以从简单的部件组合出复杂的功能</p>\n<h2 id=\"外观\"><a class=\"anchor\" href=\"#外观\">#</a> 外观</h2>\n<p>为子系统中的一组接口提供一个一致的界面， 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p>\n<p><img data-src=\"96c435a961c25546b54d938359b9ac86.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Scanner</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"词法分析\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parser</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"语法分析\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenMidCode</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">GenCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"产生中间代码\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenMachineCode</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">GenCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"产生机器码\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 高层接口  </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Compiler</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        Scanner scanner<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        Parser parser<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        GenMidCode genMidCode<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        GenMachineCode genMacCode<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        scanner<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        parser<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        genMidCode<span class=\"token punctuation\">.</span><span class=\"token function\">GenCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        genMacCode<span class=\"token punctuation\">.</span><span class=\"token function\">GenCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    Compiler compiler<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    Console <span class=\"token function\">Compiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"享元\"><a class=\"anchor\" href=\"#享元\">#</a> 享元</h2>\n<p>享元是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。</p>\n<p>在围棋中，棋子就是大量细粒度的对象。其属性有内在的，比如颜色、形状等，也有外在的，比如在棋盘上的位置。内在的属性是可以共享的，区分在于外在属性。因此，可以这样设计，只需定义两个棋子的对象，一颗黑棋和一颗白棋，这两个对象含棋子的内在属性；棋子的外在属性，即在棋盘上的位置可以提取出来作为一个结构，存放在单独的容器中。相比之前的方案，现在容器中仅仅存放了位置属性，而原来则是棋子对象。显然，现在的方案大大减少了对于空间的需求。</p>\n<p><img data-src=\"0caf31a5acaedd36e0d83b93e75ca6ae.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 棋子颜色  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">PieceColor</span> <span class=\"token punctuation\">&#123;</span>BLACK<span class=\"token punctuation\">,</span> WHITE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 棋子位置  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PiecePos</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">PiecePos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 棋子定义  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Piece</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PieceColor m_color<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 颜色  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">Piece</span><span class=\"token punctuation\">(</span>PieceColor color<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_color</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Piece</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlackPiece</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Piece</span></span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">BlackPiece</span><span class=\"token punctuation\">(</span>PieceColor color<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Piece</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">BlackPiece</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"绘制一颗黑棋\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WhitePiece</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Piece</span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">WhitePiece</span><span class=\"token punctuation\">(</span>PieceColor color<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Piece</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">WhitePiece</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"绘制一颗白棋\\n\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PieceBoard</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>PiecePos<span class=\"token operator\">></span> m_vecPos<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存放棋子的位置  </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Piece <span class=\"token operator\">*</span>m_blackPiece<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 黑棋棋子   </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Piece <span class=\"token operator\">*</span>m_whitePiece<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 白棋棋子  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    string m_blackName<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    string m_whiteName<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">PieceBoard</span><span class=\"token punctuation\">(</span>string black<span class=\"token punctuation\">,</span> string white<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_blackName</span><span class=\"token punctuation\">(</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_whiteName</span><span class=\"token punctuation\">(</span>white<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        m_blackPiece <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        m_whitePiece <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">PieceBoard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_blackPiece<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> m_whitePiece<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetPiece</span><span class=\"token punctuation\">(</span>PieceColor color<span class=\"token punctuation\">,</span> PiecePos pos<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_blackPiece <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 只有一颗黑棋  </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                m_blackPiece <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">BlackPiece</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>m_blackName<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"在位置(\"</span><span class=\"token operator\">&lt;&lt;</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">','</span><span class=\"token operator\">&lt;&lt;</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            m_blackPiece<span class=\"token operator\">-></span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_whitePiece <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                m_whitePiece <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">WhitePiece</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>m_whiteName<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"在位置(\"</span><span class=\"token operator\">&lt;&lt;</span>pos<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;&lt;</span><span class=\"token char\">','</span><span class=\"token operator\">&lt;&lt;</span>pos<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            m_whitePiece<span class=\"token operator\">-></span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        m_vecPos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    PieceBoard <span class=\"token function\">pieceBoard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    pieceBoard<span class=\"token punctuation\">.</span><span class=\"token function\">SetPiece</span><span class=\"token punctuation\">(</span>BLACK<span class=\"token punctuation\">,</span> <span class=\"token function\">PiecePos</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    pieceBoard<span class=\"token punctuation\">.</span><span class=\"token function\">SetPiece</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> <span class=\"token function\">PiecePos</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    pieceBoard<span class=\"token punctuation\">.</span><span class=\"token function\">SetPiece</span><span class=\"token punctuation\">(</span>BLACK<span class=\"token punctuation\">,</span> <span class=\"token function\">PiecePos</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    pieceBoard<span class=\"token punctuation\">.</span><span class=\"token function\">SetPiece</span><span class=\"token punctuation\">(</span>WHITE<span class=\"token punctuation\">,</span> <span class=\"token function\">PiecePos</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"代理\"><a class=\"anchor\" href=\"#代理\">#</a> 代理</h2>\n<p>代理是一种结构型设计模式，让你能够提供对象的替代品　或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。</p>\n<p>考虑一个可以在文档中嵌入图形对象的文档编辑器。有些图形对象的创建开销很大。但是打开文档必须很迅速，因此我们在打开文档时应避免一次性创建所有开销很大的对象。这里就可以运用代理模式，在打开文档时，并不打开图形对象，而是打开图形对象的代理以替代真实的图形。待到真正需要打开图形时，仍由代理负责打开。</p>\n<p><img data-src=\"e40525f48080adb11d10aeb26b637836.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Image</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_imageName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string m_imageName<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BigImage</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Image</span></span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">BigImage</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">BigImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Show big image : \"</span><span class=\"token operator\">&lt;&lt;</span>m_imageName<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BigImageProxy</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Image</span></span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    BigImage <span class=\"token operator\">*</span>m_bigImage<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">BigImageProxy</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Image</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_bigImage</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">BigImageProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_bigImage<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_bigImage <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            m_bigImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">BigImage</span><span class=\"token punctuation\">(</span>m_imageName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        m_bigImage<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Image <span class=\"token operator\">*</span>image <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">BigImageProxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代理  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    image<span class=\"token operator\">-></span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要时由代理负责打开  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">delete</span> image<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"行为模式\"><a class=\"anchor\" href=\"#行为模式\">#</a> 行为模式</h1>\n<h2 id=\"责任链\"><a class=\"anchor\" href=\"#责任链\">#</a> 责任链</h2>\n<p>责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。其思想很简单，考虑员工要求加薪。公司的管理者一共有三级，总经理、总监、经理，如果一个员工要求加薪，应该向主管的经理申请，如果加薪的数量在经理的职权内，那么经理可以直接批准，否则将申请上交给总监。总监的处理方式也一样，总经理可以处理所有请求。</p>\n<p><img data-src=\"64e6fb9ed593692210e06621bd4a6243.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象管理者  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Manager <span class=\"token operator\">*</span>m_manager<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span>Manager <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m_manager</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 经理  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonManager</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Manager</span></span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">CommonManager</span><span class=\"token punctuation\">(</span>Manager <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 经理职权之内  </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"经理\"</span><span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"批准\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"加薪\"</span><span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"元\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"经理\"</span><span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"无法处理，交由总监处理\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            m_manager<span class=\"token operator\">-></span><span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 总监  </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Majordomo</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Manager</span></span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">Majordomo</span><span class=\"token punctuation\">(</span>Manager <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 总监职权之内  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"总监\"</span><span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"批准\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"加薪\"</span><span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"元\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"总监\"</span><span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"无法处理，交由总经理处理\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            m_manager<span class=\"token operator\">-></span><span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 总经理  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GeneralManager</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Manager</span></span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">GeneralManager</span><span class=\"token punctuation\">(</span>Manager <span class=\"token operator\">*</span>manager<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Manager</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 总经理可以处理所有请求  </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"总经理\"</span><span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"批准\"</span><span class=\"token operator\">&lt;&lt;</span>name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"加薪\"</span><span class=\"token operator\">&lt;&lt;</span>num<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"元\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Manager <span class=\"token operator\">*</span>general <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">GeneralManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置上级，总经理没有上级  </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Manager <span class=\"token operator\">*</span>majordomo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Majordomo</span><span class=\"token punctuation\">(</span>general<span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置上级  </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    Manager <span class=\"token operator\">*</span>common <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">CommonManager</span><span class=\"token punctuation\">(</span>majordomo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置上级  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    common<span class=\"token operator\">-></span><span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 员工 D 要求加薪  </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    common<span class=\"token operator\">-></span><span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    common<span class=\"token operator\">-></span><span class=\"token function\">DealWithRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">delete</span> common<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> majordomo<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> general<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"命令no\"><a class=\"anchor\" href=\"#命令no\">#</a> 命令 no</h2>\n<p>&lt;br/&gt;</p>\n<h2 id=\"迭代器no\"><a class=\"anchor\" href=\"#迭代器no\">#</a> 迭代器 no</h2>\n<p>&lt;br/&gt;</p>\n<h2 id=\"中介者\"><a class=\"anchor\" href=\"#中介者\">#</a> 中介者</h2>\n<p>中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p><img data-src=\"ff93034551aa5a0ec52f8d0a382a704b.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mediator</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 抽象人  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Mediator <span class=\"token operator\">*</span>m_mediator<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中介  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetMediator</span><span class=\"token punctuation\">(</span>Mediator <span class=\"token operator\">*</span>mediator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 设置中介  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">// 向中介发送信息  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>     <span class=\"token comment\">// 从中介获取信息  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 抽象中介机构  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mediator</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">,</span> Person <span class=\"token operator\">*</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetA</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 设置其中一方  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetB</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 租房者  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Renter</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetMediator</span><span class=\"token punctuation\">(</span>Mediator <span class=\"token operator\">*</span>mediator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_mediator <span class=\"token operator\">=</span> mediator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_mediator<span class=\"token operator\">-></span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"租房者收到信息\"</span><span class=\"token operator\">&lt;&lt;</span>message<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 房东  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Landlord</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span></span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetMediator</span><span class=\"token punctuation\">(</span>Mediator <span class=\"token operator\">*</span>mediator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_mediator <span class=\"token operator\">=</span> mediator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_mediator<span class=\"token operator\">-></span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"房东收到信息：\"</span><span class=\"token operator\">&lt;&lt;</span>message<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 房屋中介  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HouseMediator</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Mediator</span></span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Person <span class=\"token operator\">*</span>m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 租房者  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    Person <span class=\"token operator\">*</span>m_B<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 房东  </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">HouseMediator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_A</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_B</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetA</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_A <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetB</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">*</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_B <span class=\"token operator\">=</span> B<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">,</span> Person <span class=\"token operator\">*</span>person<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">==</span> m_A<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 租房者给房东发信息  </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            m_B<span class=\"token operator\">-></span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 房东收到信息  </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            m_A<span class=\"token operator\">-></span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Mediator <span class=\"token operator\">*</span>mediator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">HouseMediator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    Person <span class=\"token operator\">*</span>person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Renter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 租房者  </span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    Person <span class=\"token operator\">*</span>person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Landlord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 房东  </span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    mediator<span class=\"token operator\">-></span><span class=\"token function\">SetA</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    mediator<span class=\"token operator\">-></span><span class=\"token function\">SetB</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    person1<span class=\"token operator\">-></span><span class=\"token function\">SetMediator</span><span class=\"token punctuation\">(</span>mediator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    person2<span class=\"token operator\">-></span><span class=\"token function\">SetMediator</span><span class=\"token punctuation\">(</span>mediator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    person1<span class=\"token operator\">-></span><span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我想在南京路附近租套房子，价格800元一个月\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    person2<span class=\"token operator\">-></span><span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出租房子：南京路100号，70平米，1000元一个月\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">delete</span> person1<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> person2<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> mediator<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"备忘录\"><a class=\"anchor\" href=\"#备忘录\">#</a> 备忘录</h2>\n<p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>\n<p>举个简单的例子，我们玩游戏时都会保存进度，所保存的进度以文件的形式存在。这样下次就可以继续玩，而不用从头开始。这里的进度其实就是游戏的内部状态，而这里的文件相当于是在游戏之外保存状态。这样，下次就可以从文件中读入保存的进度，从而恢复到原来的状态。这就是备忘录模式</p>\n<p><img data-src=\"f68dfc75dd4ad266d7b09195482cd347.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 需保存的信息  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Memento</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> m_vitality<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生命值  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> m_attack<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 进攻值  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> m_defense<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 防守值  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Memento</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> vitality<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> attack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defense<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">m_vitality</span><span class=\"token punctuation\">(</span>vitality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_attack</span><span class=\"token punctuation\">(</span>attack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_defense</span><span class=\"token punctuation\">(</span>defense<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Memento<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Memento <span class=\"token operator\">&amp;</span>memento<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        m_vitality <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_vitality<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m_attack <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_attack<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        m_defense <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_defense<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 游戏角色  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GameRole</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> m_vitality<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> m_attack<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> m_defense<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">GameRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_vitality</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_attack</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">m_defense</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Memento <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 保存进度，只与 Memento 对象交互，并不牵涉到 Caretake  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Memento <span class=\"token function\">memento</span><span class=\"token punctuation\">(</span>m_vitality<span class=\"token punctuation\">,</span> m_attack<span class=\"token punctuation\">,</span> m_defense<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> memento<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>Memento memento<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 载入进度，只与 Memento 对象交互，并不牵涉到 Caretake  </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        m_vitality <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_vitality<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        m_attack <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_attack<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        m_defense <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span>m_defense<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"vitality : \"</span><span class=\"token operator\">&lt;&lt;</span> m_vitality<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", attack : \"</span><span class=\"token operator\">&lt;&lt;</span> m_attack<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\", defense : \"</span><span class=\"token operator\">&lt;&lt;</span> m_defense<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_vitality <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> m_attack <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  m_defense <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 保存的进度库  </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Caretake</span>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">Caretake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>Memento menento<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_vecMemento<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>menento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    Memento <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_vecMemento<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Memento<span class=\"token operator\">></span> m_vecMemento<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    Caretake caretake<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    GameRole role<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    role<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 初始值  </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    caretake<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存状态  </span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    role<span class=\"token punctuation\">.</span><span class=\"token function\">Attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    role<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 进攻后  </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    role<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>caretake<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 载入状态   </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    role<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 恢复到状态 0  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"观察者\"><a class=\"anchor\" href=\"#观察者\">#</a> 观察者</h2>\n<p>观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。它还有两个别名，依赖 (Dependents)，发布 - 订阅 (Publish-Subsrcibe)。</p>\n<p>可以举个博客订阅的例子，当博主发表新文章的时候，即博主状态发生了改变，那些订阅的读者就会收到通知，然后进行相应的动作，比如去看文章，或者收藏起来。博主与读者之间存在种一对多的依赖关系。</p>\n<p><img data-src=\"64d49c14e61a756a05645b122b6f044a.png\" alt=\"截图\" /></p>\n<p>可以看到博客类中有一个观察者链表（即订阅者），当博客的状态发生变化时，通过 Notify 成员函数通知所有的观察者，告诉他们博客的状态更新了。而观察者通过 Update 成员函数获取博客的状态信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 观察者  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 博客  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Blog</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Attach</span><span class=\"token punctuation\">(</span>Observer <span class=\"token operator\">*</span>observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_observers<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>     <span class=\"token comment\">// 添加观察者  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span>Observer <span class=\"token operator\">*</span>observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>        <span class=\"token comment\">// 移除观察者  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 通知观察者  </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token operator\">&lt;</span>Observer<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> m_observers<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> m_observers<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_status <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 设置状态  </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">virtual</span> string <span class=\"token function\">GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_status<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    <span class=\"token comment\">// 获得状态  </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    list<span class=\"token operator\">&lt;</span>Observer<span class=\"token operator\">*</span> <span class=\"token operator\">></span> m_observers<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 观察者链表  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    string m_status<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态  </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 具体博客类  </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogCSDN</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Blog</span></span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 博主名称  </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">BlogCSDN</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">BlogCSDN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_status <span class=\"token operator\">=</span> <span class=\"token string\">\"CSDN通知 : \"</span> <span class=\"token operator\">+</span> m_name <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 具体设置状态信息  </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    string <span class=\"token function\">GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_status<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 具体观察者  </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ObserverBlog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Observer</span></span>     </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    string m_name<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 观察者名称  </span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Blog <span class=\"token operator\">*</span>m_blog<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 观察的博客，当然以链表形式更好，就可以观察多个博客  </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>   </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">ObserverBlog</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span>Blog <span class=\"token operator\">*</span>blog<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_blog</span><span class=\"token punctuation\">(</span>blog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">ObserverBlog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 获得更新状态  </span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        string status <span class=\"token operator\">=</span> m_blog<span class=\"token operator\">-></span><span class=\"token function\">GetStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span>m_name<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"-------\"</span><span class=\"token operator\">&lt;&lt;</span>status<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Blog <span class=\"token operator\">*</span>blog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">BlogCSDN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wuzhekai1985\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Observer <span class=\"token operator\">*</span>observer1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ObserverBlog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tutupig\"</span><span class=\"token punctuation\">,</span> blog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    blog<span class=\"token operator\">-></span><span class=\"token function\">Attach</span><span class=\"token punctuation\">(</span>observer1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    blog<span class=\"token operator\">-></span><span class=\"token function\">SetStatus</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发布博客\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    blog<span class=\"token operator\">-></span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">delete</span> blog<span class=\"token punctuation\">;</span> <span class=\"token keyword\">delete</span> observer1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"状态\"><a class=\"anchor\" href=\"#状态\">#</a> 状态</h2>\n<p>状态模式：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。它有两种使用情况：（1）一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为。（2）一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</p>\n<p>以战争为例，假设一场战争需经历四个阶段：前期、中期、后期、结束。当战争处于不同的阶段，战争的行为是不一样的，也就说战争的行为取决于所处的阶段，而且随着时间的推进是动态变化的。</p>\n<p><img data-src=\"b8c47cca7c7f4ad7a8a59743e488578b.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">War</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Prophase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Metaphase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Anaphase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">End</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 战争  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">War</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    State <span class=\"token operator\">*</span>m_state<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 目前状态  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> m_days<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 战争持续时间  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">War</span><span class=\"token punctuation\">(</span>State <span class=\"token operator\">*</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">m_state</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_days</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">War</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_state<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_days<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetDays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> days<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_days <span class=\"token operator\">=</span> days<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span>State <span class=\"token operator\">*</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_state<span class=\"token punctuation\">;</span> m_state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_state<span class=\"token operator\">-></span><span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 战争结束  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EndState</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span></span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">End</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结束阶段的具体行为  </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"战争结束\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">End</span><span class=\"token punctuation\">(</span>war<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 后期  </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AnaphaseState</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span></span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Anaphase</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后期的具体行为  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第\"</span><span class=\"token operator\">&lt;&lt;</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"天：战争后期，双方拼死一搏\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">EndState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">Anaphase</span><span class=\"token punctuation\">(</span>war<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 中期  </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MetaphaseState</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span></span>  </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Metaphase</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 中期的具体行为  </span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第\"</span><span class=\"token operator\">&lt;&lt;</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"天：战争中期，进入相持阶段，双发各有损耗\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">AnaphaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">Metaphase</span><span class=\"token punctuation\">(</span>war<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 前期  </span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProphaseState</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span></span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Prophase</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 前期的具体行为  </span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"第\"</span><span class=\"token operator\">&lt;&lt;</span>war<span class=\"token operator\">-></span><span class=\"token function\">GetDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"天：战争初期，双方你来我往，互相试探对方\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">else</span>  </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">SetState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">MetaphaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            war<span class=\"token operator\">-></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">CurrentState</span><span class=\"token punctuation\">(</span>War <span class=\"token operator\">*</span>war<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">Prophase</span><span class=\"token punctuation\">(</span>war<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    War <span class=\"token operator\">*</span>war <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">War</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ProphaseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        war<span class=\"token operator\">-></span><span class=\"token function\">SetDays</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        war<span class=\"token operator\">-></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">delete</span> war<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"策略\"><a class=\"anchor\" href=\"#策略\">#</a> 策略</h2>\n<p>策略模式是指定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。也就是说这些算法所完成的功能一样，对外的接口一样，只是各自实现上存在差异。</p>\n<p><img data-src=\"ebc207bad40ecb66021a00e61b012d93.png\" alt=\"截图\" /></p>\n<p>指定替换算法的方式</p>\n<ol>\n<li>通过参数指定，在 Cache 构造函数中传入参数</li>\n<li>利用模板实现，在生成 Cache 具体类的时候指定模板</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象接口  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReplaceAlgorithm</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 三种具体的替换算法  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRU_ReplaceAlgorithm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReplaceAlgorithm</span></span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Least Recently Used replace algorithm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FIFO_ReplaceAlgorithm</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReplaceAlgorithm</span></span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"First in First out replace algorithm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Random_ReplaceAlgorithm</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReplaceAlgorithm</span></span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Random replace algorithm\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//Cache 需要用到替换算法  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">RA</span> <span class=\"token punctuation\">&#123;</span>LRU<span class=\"token punctuation\">,</span> FIFO<span class=\"token punctuation\">,</span> RANDOM<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标签  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ReplaceAlgorithm <span class=\"token operator\">*</span>m_ra<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">Cache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">RA</span> ra<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ra <span class=\"token operator\">==</span> LRU<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            m_ra <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">LRU_ReplaceAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ra <span class=\"token operator\">==</span> FIFO<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            m_ra <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">FIFO_ReplaceAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ra <span class=\"token operator\">==</span> RANDOM<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            m_ra <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Random_ReplaceAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">else</span>   </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            m_ra <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">delete</span> m_ra<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> m_ra<span class=\"token operator\">-></span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Cache <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>LRU<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指定标签即可  </span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cache<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"模板方法\"><a class=\"anchor\" href=\"#模板方法\">#</a> 模板方法</h2>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p><img data-src=\"593d58c7de3c3d9a1d528bc08e268d53.png\" alt=\"截图\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 简历  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Resume</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 保护成员  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetPersonalInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetEducation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SetWorkExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">FillResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">SetPersonalInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">SetEducation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">SetWorkExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResumeA</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resume</span></span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetPersonalInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"A's PersonalInfo\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetEducation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"A's Education\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetWorkExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"A's Work Experience\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResumeB</span><span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resume</span></span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetPersonalInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B's PersonalInfo\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetEducation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B's Education\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">SetWorkExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"B's Work Experience\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 客户</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Resume <span class=\"token operator\">*</span>r1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ResumeA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    r1<span class=\"token operator\">-></span><span class=\"token function\">FillResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">delete</span> r1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ResumeB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    r1<span class=\"token operator\">-></span><span class=\"token function\">FillResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">delete</span> r1<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    r1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"访问者no\"><a class=\"anchor\" href=\"#访问者no\">#</a> 访问者 no</h2>\n",
            "tags": [
                "设计模式",
                "设计模式"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/hexo/hexo/",
            "url": "http://lovearrowshoot.github.io/hexo/hexo/",
            "title": "Hexo-Shoka主题的配置和使用",
            "date_published": "2023-06-30T03:29:10.000Z",
            "content_html": "<p><strong>参考链接</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY2F0ZWdvcmllcy9jb21wdXRlci1zY2llbmNlL25vdGUvdGhlbWUtc2hva2EtZG9jLw==\">https://shoka.lostyu.me/categories/computer-science/note/theme-shoka-doc/</span></p>\n<h1 id=\"配置搭建\"><a class=\"anchor\" href=\"#配置搭建\">#</a> 配置搭建</h1>\n<p>在根目录下的站点配置文件，_config.yml 中修改</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 写作设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># 默认的文件名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post     <span class=\"token comment\"># 默认的文章类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 是否允许文章中放置外部链接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 创建文章的同时创建一个同名文件夹，用于存放文章中所引用的图片</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">marked</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">prependRoot</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">postAsset</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这里配置分类与标签</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这些分类对应 source/_posts 文件夹下对应的子文件夹</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">计算机科学</span><span class=\"token punctuation\">:</span> CS</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">C++</span><span class=\"token punctuation\">:</span> cpp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">算法</span><span class=\"token punctuation\">:</span> Algorithms</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">数据库</span><span class=\"token punctuation\">:</span> DB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">Hexo-Shoka</span><span class=\"token punctuation\">:</span> hexo</pre></td></tr></table></figure><h1 id=\"开始写作\"><a class=\"anchor\" href=\"#开始写作\">#</a> 开始写作</h1>\n<h2 id=\"创建首页分类\"><a class=\"anchor\" href=\"#创建首页分类\">#</a> 创建首页分类</h2>\n<p>在上面的配置分类中新增关键字以及创建对应的_posts 下子文件夹，再将该分类的 md 文件都放置在子文件夹中即可</p>\n<h2 id=\"创建页面\"><a class=\"anchor\" href=\"#创建页面\">#</a> 创建页面</h2>\n<p>在根目录下主题配置文件，_config_shoka.yml 文件中修改</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 菜单与社交按钮</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># || 分割符用于切割为链接，图标，颜色</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># home: / || home</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">文章</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">分类</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">标签</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">关于</span><span class=\"token punctuation\">:</span> /about/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> user</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">直达</span><span class=\"token punctuation\">:</span> /links/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> plane</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 魔法: /magic/ || magic  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">#边栏头像下显示的各种网页地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/LoveArrowShoot <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/lxx159110 <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/marvelfg <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr></table></figure><p>在根目录的命令行下输入 hexo new page 页面名称，此时会在 source 文件夹下生成一个该名称命名的文件夹及页面文件</p>\n<p>如 hexo new page magic, 则会出现 source/magic 文件夹以及内部一个 index.md 文件</p>\n<p>在此文件中对页面进行布局，再将该文件夹及对应名称如上方注释写入 yml 配置即可，在顶框和边栏就会出现对应按钮以及相应的跳转功能</p>\n<h2 id=\"创建文章\"><a class=\"anchor\" href=\"#创建文章\">#</a> 创建文章</h2>\n<p>在根目录的命令行下输入 hexo new post  -p 相对目录 / 文件名称.md 文章名称</p>\n<p>此时会在 source/_posts/ 相对路径 文件夹下生成一个 md 文件和同名文件夹</p>\n<p>md 文件中的 title 为文章名称，tag 为标签，categories 为分类，配置好后在分隔符下方根据 md 格式编写文章即可，文章所引用到的图片放在文章同名文件夹下即可</p>\n<h2 id=\"文章首页置顶\"><a class=\"anchor\" href=\"#文章首页置顶\">#</a> 文章首页置顶</h2>\n<p>在文章头部分隔线内加入 sticky: true 即可，若有多篇置顶，则根据发布日期倒序排列，不参与分页</p>\n<h1 id=\"shoka主题常用特色功能\"><a class=\"anchor\" href=\"#shoka主题常用特色功能\">#</a> Shoka 主题常用特色功能</h1>\n<p>在 md 文件中按照如下格式编写</p>\n<h2 id=\"链接块\"><a class=\"anchor\" href=\"#链接块\">#</a> 链接块</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123; %links%&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">-</span> site: #站点名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  owner: #管理员名字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url: #站点网址</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  desc: #简短描述</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  image: #一张图片</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  color: #颜色代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#123; %endlinks%&#125;</pre></td></tr></table></figure><h2 id=\"文字特效\"><a class=\"anchor\" href=\"#文字特效\">#</a> 文字特效</h2>\n<p>若要组合使用，则在同一个大括号中用空格隔开即可</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>++下划线++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++波浪线++&#123;.wavy&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>++着重点++&#123;.dot&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>++紫色下划线++&#123;.primary&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>++绿色波浪线++&#123;.wavy .success&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>++黄色着重点++&#123;.dot .warning&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">删除线～～</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span><span class=\"token punctuation\">~~</span></span>红色删除线～～&#123;.danger&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>==荧光高亮==</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>[赤橙黄绿青蓝紫]&#123;.rainbow&#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>[红色]&#123;.red&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[粉色]&#123;.pink&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>[橙色]&#123;.orange&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>[黄色]&#123;.yellow&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>[绿色]&#123;.green&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>[靛青]&#123;.aqua&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>[蓝色]&#123;.blue&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>[紫色]&#123;.purple&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>[灰色]&#123;.grey&#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>快捷键 [Ctrl]&#123;.kbd&#125; + [C]&#123;.kbd .red&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>// 化学式</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>H<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">2</span><span class=\"token punctuation\">~</span></span>0</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>// 指数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>29^th^</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>// 黑幕文字，触碰后显示</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>!!文字!!</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>// 模糊文字，选中后显示</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>!!文字!!&#123;.bulr]</pre></td></tr></table></figure><h2 id=\"折叠块\"><a class=\"anchor\" href=\"#折叠块\">#</a> 折叠块</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++颜色 名称</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这里是折叠块的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr></table></figure><h2 id=\"标签卡\"><a class=\"anchor\" href=\"#标签卡\">#</a> 标签卡</h2>\n<p>ID 用于标识是否在同一行下显示</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>;;;ID 标签名称</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>卡的内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>;;;</pre></td></tr></table></figure>",
            "tags": [
                "Hexo",
                "Hexo"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/DB/Redis/",
            "url": "http://lovearrowshoot.github.io/DB/Redis/",
            "title": "Redis",
            "date_published": "2023-06-30T02:52:26.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><img data-src=\"825ba3a657ba7f5825b07af0a36465b6.png\" alt=\"1679488520956.png\" /></p>\n<h1 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h1>\n<h2 id=\"数据库实现\"><a class=\"anchor\" href=\"#数据库实现\">#</a> 数据库实现</h2>\n<p><img data-src=\"686ecfa51d22947db60c9898b4adf078.png\" alt=\"截图\" /></p>\n<p><img data-src=\"728f7ff443ca8f9e61ce181ccf5de051.png\" alt=\"1679661996056.png\" /></p>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<p>&lt;img src=&quot;13eda52ea8480718461a53c17978a17b.png&quot; alt=&quot;截图&quot; style=&quot;zoom:100%;&quot; /&gt;</p>\n<p><img data-src=\"83d8f29b2937acc56c6ab1c37856ab62.png\" alt=\"1679487343639.png\" /></p>\n<p>&lt;img src=&quot;fdd0602a7d6f49a807a60f2c44b07e94.png&quot; alt=&quot;1679487357432.png&quot; style=&quot;zoom:100%;&quot; /&gt;</p>\n<h2 id=\"实现方式\"><a class=\"anchor\" href=\"#实现方式\">#</a> 实现方式</h2>\n<p><img data-src=\"0079cd6449b87b6f414ee1173a9e0291.png\" alt=\"1679487482138.png\" /></p>\n<p><img data-src=\"9dd848962acd7b4e4a2df2a723473855.png\" alt=\"1679487488953.png\" /></p>\n<p><img data-src=\"c9f6835769a9acfe8f3371d6849de610.png\" alt=\"1679487497008.png\" /></p>\n<p><img data-src=\"149da92d094905304239dd8963a6f926.png\" alt=\"1679487502787.png\" /></p>\n<p><img data-src=\"a15ab46d398da94c1b222a2ea314a80a.png\" alt=\"1679487509515.png\" /></p>\n<h1 id=\"线程模型\"><a class=\"anchor\" href=\"#线程模型\">#</a> 线程模型</h1>\n<p><img data-src=\"f3b7de55f4a88dda3ef871ad2e50ce98.png\" alt=\"截图\" /></p>\n<p><img data-src=\"e0bea70f14513b8ddee424588652920d.png\" alt=\"1679488226295.png\" /></p>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<p><img data-src=\"1abaf95dc6afeb244ff0ffe28ae37890.png\" alt=\"1679488357946.png\" /></p>\n<h2 id=\"写时复制技术\"><a class=\"anchor\" href=\"#写时复制技术\">#</a> 写时复制技术</h2>\n<p>子进程和父进程共享同一片内存数据，只有在发生修改内存数据的情况下，物理内存才会被复制一份</p>\n<h2 id=\"aof日志\"><a class=\"anchor\" href=\"#aof日志\">#</a> AOF 日志</h2>\n<p><img data-src=\"de793bf932bdb637805e16eca9f2c6f8.png\" alt=\"截图\" /></p>\n<p><img data-src=\"573f3c50eed0e5f47a2eadb7ac9ac97a.png\" alt=\"1679488727700.png\" /></p>\n<h3 id=\"写入aof日志过程\"><a class=\"anchor\" href=\"#写入aof日志过程\">#</a> 写入 AOF 日志过程</h3>\n<p><img data-src=\"2030551fdaf7d390c8adc7acc4e8abf4.png\" alt=\"截图\" /></p>\n<p><img data-src=\"e42c794ab68937c8c57309156fb0c917.png\" alt=\"1679488798408.png\" /></p>\n<h3 id=\"aof重写机制\"><a class=\"anchor\" href=\"#aof重写机制\">#</a> AOF 重写机制</h3>\n<p><strong>AOF 重写机制是在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到「新的 AOF 文件」，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件</strong></p>\n<p><img data-src=\"82767ad9ec8bd4fb212a1ed424a9bfe8.png\" alt=\"1679489052033.png\" /></p>\n<h3 id=\"重写时执行命令\"><a class=\"anchor\" href=\"#重写时执行命令\">#</a> 重写时执行命令</h3>\n<p><img data-src=\"371ef5231c4ce97097e42c619ca65f66.png\" alt=\"1679489090923.png\" /></p>\n<h2 id=\"rdb快照\"><a class=\"anchor\" href=\"#rdb快照\">#</a> RDB 快照</h2>\n<p>RDB 快照就是记录某一个瞬间的内存数据，记录的是实际二进制数据，</p>\n<p><img data-src=\"6cd9296a53d04a171cf83c4909dc176a.png\" alt=\"1679489638723.png\" /></p>\n<h2 id=\"混合持久化\"><a class=\"anchor\" href=\"#混合持久化\">#</a> 混合持久化</h2>\n<p><img data-src=\"690ab4f4cbc21ebbf99f0c774024ab2a.png\" alt=\"1679489747562.png\" /></p>\n<p><img data-src=\"aa67657567e7d67ff63d3f97a2dfe82e.png\" alt=\"1679489755306.png\" /></p>\n<h2 id=\"大key对持久化的影响\"><a class=\"anchor\" href=\"#大key对持久化的影响\">#</a> 大 key 对持久化的影响</h2>\n<p><img data-src=\"c889d9e9592fc89f3b248181927a535d.png\" alt=\"1679489924511.png\" /></p>\n<h1 id=\"集群\"><a class=\"anchor\" href=\"#集群\">#</a> 集群</h1>\n<h2 id=\"主从复制\"><a class=\"anchor\" href=\"#主从复制\">#</a> 主从复制</h2>\n<p><img data-src=\"12f645507c65e2e3992838037be422b4.png\" alt=\"截图\" /></p>\n<h3 id=\"第一次同步\"><a class=\"anchor\" href=\"#第一次同步\">#</a> 第一次同步</h3>\n<p><img data-src=\"5682a4a31df2d5ddfa614b43791d4cb4.png\" alt=\"截图\" /></p>\n<p><img data-src=\"76a4e756ce65bc5120db940393265d02.png\" alt=\"1679494144033.png\" /></p>\n<h3 id=\"增量复制\"><a class=\"anchor\" href=\"#增量复制\">#</a> 增量复制</h3>\n<p><img data-src=\"20b75507ad0eae08c3f2c6ebeaee7659.png\" alt=\"1679493989309.png\" /></p>\n<p><img data-src=\"57728dc099d9e8e160b2b5f47eeb3b6c.png\" alt=\"1679494012272.png\" /></p>\n<p><img data-src=\"214349511394b7b6ef4d6d728e8bb56e.png\" alt=\"截图\" /></p>\n<h2 id=\"哨兵模式\"><a class=\"anchor\" href=\"#哨兵模式\">#</a> 哨兵模式</h2>\n<p><img data-src=\"2a8b5911aac15c262bd8f31a52c1543f.png\" alt=\"截图\" /></p>\n<p>哨兵节点通过 Redis 的发布者 / 订阅者机制，哨兵之间相互感知，相互连接，然后组成哨兵集群</p>\n<p><img data-src=\"2d1c776baa67c3cf5fa7e67bc1f9d9d5.png\" alt=\"截图\" /></p>\n<p>哨兵通过 INFO 命令，在主节点获得所有从节点连接信息，于是和从节点建立连接，进行监控</p>\n<p><img data-src=\"0ac671e3d82cdcd20d4faeff09c9a1f5.png\" alt=\"截图\" /></p>\n<p><img data-src=\"855c8486be0e3b69ede458bf12353aa6.png\" alt=\"1679495012992.png\" /></p>\n<h2 id=\"切片集群\"><a class=\"anchor\" href=\"#切片集群\">#</a> 切片集群</h2>\n<p><img data-src=\"9d1cdb313d8c541321571c66237afa76.png\" alt=\"1679495285931.png\" /></p>\n<h2 id=\"脑裂问题\"><a class=\"anchor\" href=\"#脑裂问题\">#</a> 脑裂问题</h2>\n<p>由于网络问题，集群节点之间失去联系。主从数据不同步；重新平衡选举，产生两个主服务。等网络恢复，旧主节点降级为从节点，与新主节点进行同步复制时，从节点会清空自己的缓冲区，导致之前客户端写入的数据丢失</p>\n<p><img data-src=\"b902aeee28d3e6c7527691d563bce320.png\" alt=\"1679495437754.png\" /></p>\n<h1 id=\"过期删除\"><a class=\"anchor\" href=\"#过期删除\">#</a> 过期删除</h1>\n<h2 id=\"惰性删除策略\"><a class=\"anchor\" href=\"#惰性删除策略\">#</a> 惰性删除策略</h2>\n<p>&lt;img src=&quot;7399848c8a224bf07e0c546aba1c1229.png&quot; alt=&quot;截图&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p><img data-src=\"367168f039da3aede7c05c379fff8b37.png\" alt=\"1679495892068.png\" /></p>\n<h2 id=\"定期删除策略\"><a class=\"anchor\" href=\"#定期删除策略\">#</a> 定期删除策略</h2>\n<p>&lt;img src=&quot;edc8d9f19ec20d29522cd084af37113c.png&quot; alt=&quot;截图&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<p><img data-src=\"0346774ba07a72596f7cf7e6d12430d2.png\" alt=\"1679495958651.png\" /></p>\n<h1 id=\"内存淘汰\"><a class=\"anchor\" href=\"#内存淘汰\">#</a> 内存淘汰</h1>\n<p><img data-src=\"912c6204df7915e4f49ead1ca2741dfc.png\" alt=\"1679496284924.png\" /></p>\n<h1 id=\"缓存设计\"><a class=\"anchor\" href=\"#缓存设计\">#</a> 缓存设计</h1>\n<h2 id=\"缓存异常\"><a class=\"anchor\" href=\"#缓存异常\">#</a> 缓存异常</h2>\n<p><img data-src=\"09109217d4890b45654499ceffdbafac.png\" alt=\"截图\" /></p>\n<h2 id=\"缓存更新策略\"><a class=\"anchor\" href=\"#缓存更新策略\">#</a> 缓存更新策略</h2>\n<h3 id=\"cache-aside旁路缓存策略\"><a class=\"anchor\" href=\"#cache-aside旁路缓存策略\">#</a> Cache Aside（旁路缓存）策略</h3>\n<p><img data-src=\"372976721038e0deef9df930e8b2dca8.png\" alt=\"1679497096796.png\" /></p>\n<h3 id=\"readwrite-through读穿-写穿策略\"><a class=\"anchor\" href=\"#readwrite-through读穿-写穿策略\">#</a> Read/Write Through（读穿 / 写穿）策略</h3>\n<p><img data-src=\"b011ad617b75120ba15751dc48e59823.png\" alt=\"1679497145491.png\" /></p>\n<h3 id=\"write-back写回策略\"><a class=\"anchor\" href=\"#write-back写回策略\">#</a> Write Back（写回）策略</h3>\n<p>Write Back（写回）策略在更新数据的时候，只更新缓存，同时将缓存数据设置为脏的，然后立马返回，并不会更新数据库。对于数据库的更新，会通过批量异步更新的方式进行。</p>\n<h1 id=\"实战\"><a class=\"anchor\" href=\"#实战\">#</a> 实战</h1>\n<h2 id=\"延迟队列\"><a class=\"anchor\" href=\"#延迟队列\">#</a> 延迟队列</h2>\n<p><img data-src=\"aa675444152110a9ba40f6d7cc4881f6.png\" alt=\"1679497724285.png\" /></p>\n<h2 id=\"大key\"><a class=\"anchor\" href=\"#大key\">#</a> 大 key</h2>\n<p><img data-src=\"59c940711397093127f2946128773dee.png\" alt=\"1679497772024.png\" /></p>\n<p><img data-src=\"113fd792313ad459ecb33729dc543dbb.png\" alt=\"1679497761676.png\" /></p>\n<p><img data-src=\"56aa9c33087651667d1af148afddf62d.png\" alt=\"1679498014361.png\" /></p>\n<h2 id=\"管道\"><a class=\"anchor\" href=\"#管道\">#</a> 管道</h2>\n<p><img data-src=\"60b19c6e007456b9ff59efb2c2b426f2.png\" alt=\"1679497824619.png\" /></p>\n<h2 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h2>\n<p><img data-src=\"dc6382ec9d83edfe9284b5173033fda2.png\" alt=\"1679497956443.png\" /></p>\n<p><img data-src=\"8744e43874f1bffd701ed17d88f533e8.png\" alt=\"1679497900935.png\" /></p>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/DB/MySQL/",
            "url": "http://lovearrowshoot.github.io/DB/MySQL/",
            "title": "MySQL",
            "date_published": "2023-06-30T02:52:10.000Z",
            "content_html": "<h1 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h1>\n<p><img data-src=\"55a48173db0950001d1d370beb14225b.png\" alt=\"截图\" /></p>\n<h2 id=\"buffer-pool\"><a class=\"anchor\" href=\"#buffer-pool\">#</a> Buffer Pool</h2>\n<p><img data-src=\"bbac63c6804489096455da38f4ae60ac.png\" alt=\"截图\" /></p>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<p><img data-src=\"7f50e1376fd8e70540ae7bcd2fb1a01d.png\" alt=\"1679296020905.png\" /></p>\n<blockquote>\n<p>联合索引的最左匹配原则，在遇到范围查询（如 &gt;、&lt;）的时候，就会停止匹配，也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引</p>\n<p>注意，对于 &gt;=、&lt;=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配</p>\n</blockquote>\n<p><img data-src=\"ebcda5575ac5dca3e3e418d1d4735ce1.png\" alt=\"截图\" /></p>\n<h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<h2 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h2>\n<p><img data-src=\"62cb96138c83780bf39a4df60a06abd3.png\" alt=\"1679365898087.png\" /></p>\n<blockquote>\n<p><strong>脏读：读到其他事务未提交的数据</strong></p>\n<p><strong>不可重复读：前后读取的数据不一致</strong></p>\n<p><strong>幻读：前后读取的记录数量不一致</strong></p>\n</blockquote>\n<h2 id=\"隔离级别\"><a class=\"anchor\" href=\"#隔离级别\">#</a> 隔离级别</h2>\n<p><img data-src=\"a7f199cfa7c9f49f451834f6d12c8a2b.png\" alt=\"1679366412309.png\" /></p>\n<blockquote>\n<p><strong>「读提交」和「可重复读」隔离级别的事务通过 Read View 实现</strong></p>\n<p><strong>「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View</strong></p>\n<p><strong>「可重复读」隔离级别是「启动事务时」生成 Read View，整个事务期间都用该 Read View</strong></p>\n</blockquote>\n<h2 id=\"read-view\"><a class=\"anchor\" href=\"#read-view\">#</a> Read View</h2>\n<p><img data-src=\"9784835218f9efe79c7360ab92ba868c.png\" alt=\"截图\" /></p>\n<p><img data-src=\"98df64e4e9290a2b2b7027f2d5cbb7f9.png\" alt=\"1679378272345.png\" /></p>\n<h1 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h1>\n<h2 id=\"种类\"><a class=\"anchor\" href=\"#种类\">#</a> 种类</h2>\n<h3 id=\"全局锁\"><a class=\"anchor\" href=\"#全局锁\">#</a> 全局锁</h3>\n<p>执行后，数据库处于只读状态，用于做全库逻辑备份</p>\n<h3 id=\"表级锁\"><a class=\"anchor\" href=\"#表级锁\">#</a> 表级锁</h3>\n<ul>\n<li>表锁</li>\n</ul>\n<p>对整张表加读锁或写锁</p>\n<ul>\n<li>元数据锁 MDL</li>\n</ul>\n<p>对表进行 CRUD 时，加 MDL 读锁</p>\n<p>对表进行结构变更时，加 MDL 写锁</p>\n<ul>\n<li>意向锁</li>\n</ul>\n<p>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间不会发生冲突，只和表锁发生冲突。</p>\n<p>意向锁的目的是为了快速判断表里是否有记录被加锁</p>\n<ul>\n<li>AUTO-INC 锁</li>\n</ul>\n<p>用于给设置为自增的主键赋值，阻塞其他事务对该表的插入操作</p>\n<h3 id=\"行级锁\"><a class=\"anchor\" href=\"#行级锁\">#</a> 行级锁</h3>\n<ul>\n<li>Record Lock</li>\n</ul>\n<p>记录锁，也就是仅仅把一条记录锁上</p>\n<ul>\n<li>Gap Lock</li>\n</ul>\n<p>间隙锁，锁定一个范围，但是不包含记录本身</p>\n<ul>\n<li>Next-Key Lock</li>\n</ul>\n<p>锁定一个范围，并且锁定记录本身</p>\n<h3 id=\"插入意向锁\"><a class=\"anchor\" href=\"#插入意向锁\">#</a> 插入意向锁</h3>\n<p>表明有事务想在某个区间插入新记录，但是该区间被加了间隙锁，现在处于等待状态</p>\n<h2 id=\"加锁\"><a class=\"anchor\" href=\"#加锁\">#</a> 加锁</h2>\n<h3 id=\"唯一索引等值查询\"><a class=\"anchor\" href=\"#唯一索引等值查询\">#</a> 唯一索引等值查询</h3>\n<p><img data-src=\"da76468a203e616d561387378c4c84aa.png\" alt=\"1679417052733.png\" /></p>\n<h3 id=\"唯一索引范围查询\"><a class=\"anchor\" href=\"#唯一索引范围查询\">#</a> 唯一索引范围查询</h3>\n<p><img data-src=\"46e512c338d26ebd7e3a9cf4b825b85f.png\" alt=\"1679417038825.png\" /></p>\n<h3 id=\"非唯一索引等值查询\"><a class=\"anchor\" href=\"#非唯一索引等值查询\">#</a> 非唯一索引等值查询</h3>\n<p><img data-src=\"55876725c404978a52a0ed8257d88654.png\" alt=\"1679417286688.png\" /></p>\n<h3 id=\"非唯一索引范围查询\"><a class=\"anchor\" href=\"#非唯一索引范围查询\">#</a> 非唯一索引范围查询</h3>\n<p><img data-src=\"3009e2dba128aae74cce14622968e8d6.png\" alt=\"1679417346852.png\" /></p>\n<h1 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h1>\n<h2 id=\"undo-log\"><a class=\"anchor\" href=\"#undo-log\">#</a> undo log</h2>\n<p><img data-src=\"3801a0f1b656172e31a6dfa6f4744dfc.png\" alt=\"1679462627466.png\" /></p>\n<h2 id=\"redo-log\"><a class=\"anchor\" href=\"#redo-log\">#</a> redo log</h2>\n<p><img data-src=\"90a227c9aa98575280c2dcfc973c30bb.png\" alt=\"1679462666754(1).png\" /></p>\n<h2 id=\"主从复制\"><a class=\"anchor\" href=\"#主从复制\">#</a> 主从复制</h2>\n<p><img data-src=\"268b99ee339b6805c415b7f5775c7123.png\" alt=\"截图\" /></p>\n<p><img data-src=\"e81169ea6b84b9e0aeff67219a9d23ba.png\" alt=\"1679462711479.png\" /></p>\n<h2 id=\"两阶段提交\"><a class=\"anchor\" href=\"#两阶段提交\">#</a> 两阶段提交</h2>\n<p><img data-src=\"716947f47edfd2beaab237d9d353c94e.png\" alt=\"1679463399225.png\" /></p>\n<h2 id=\"更新记录流程\"><a class=\"anchor\" href=\"#更新记录流程\">#</a> 更新记录流程</h2>\n<p><img data-src=\"4a2c6b8526d36de822993c3e79b13c85.png\" alt=\"1679463790086.png\" /></p>\n",
            "tags": [
                "数据库",
                "数据库"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/CS/OS/",
            "url": "http://lovearrowshoot.github.io/CS/OS/",
            "title": "操作系统",
            "date_published": "2023-06-30T02:29:20.000Z",
            "content_html": "<h1 id=\"概览\"><a class=\"anchor\" href=\"#概览\">#</a> 概览</h1>\n<ol>\n<li>操作系统（Operating System，简称 OS）是管理计算机硬件与软件资源的程序，是计算机的基石。</li>\n<li>操作系统本质上是一个运行在计算机上的软件程序 ，用于管理计算机硬件和软件资源。</li>\n<li>操作系统存在屏蔽了硬件层的复杂性。 操作系统就像是硬件使用的负责人，统筹着各种相关事项。</li>\n<li>操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。</li>\n</ol>\n<h2 id=\"系统调用\"><a class=\"anchor\" href=\"#系统调用\">#</a> 系统调用</h2>\n<p>根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</p>\n<p>用户态 (user mode) : 用户态运行的进程可以直接读取用户程序的数据。</p>\n<p>系统态 (kernel mode): 可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。</p>\n<p>我们运行的程序基本都是运行在用户态，也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。这些系统调用按功能大致可分为如下几类：</p>\n<ul>\n<li>设备管理。完成设备的请求或释放，以及设备启动等功能。</li>\n<li>文件管理。完成文件的读、写、创建及删除等功能。</li>\n<li>进程控制。完成进程的创建、撤销、阻塞及唤醒等功能。</li>\n<li>进程通信。完成进程之间的消息传递或信号传递等功能。</li>\n<li>内存管理。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li>\n<li><img data-src=\"452eaa10218c49e03390896987bbe9fd.png\" alt=\"截图\" /></li>\n</ul>\n<h2 id=\"硬件结构\"><a class=\"anchor\" href=\"#硬件结构\">#</a> 硬件结构</h2>\n<h3 id=\"冯诺依曼模型\"><a class=\"anchor\" href=\"#冯诺依曼模型\">#</a> 冯诺依曼模型</h3>\n<p><img data-src=\"641e410538abd5e3ea7febb846abfe15.png\" alt=\"截图\" /></p>\n<h3 id=\"存储器层次关系\"><a class=\"anchor\" href=\"#存储器层次关系\">#</a> 存储器层次关系</h3>\n<p><img data-src=\"7e690ef1763726a91b5ac07c2f8e93cf.png\" alt=\"截图\" /></p>\n<h1 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h1>\n<h2 id=\"虚拟内存\"><a class=\"anchor\" href=\"#虚拟内存\">#</a> 虚拟内存</h2>\n<ol>\n<li><strong>虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，CPU 访问内存会有很明显的重复访问的倾向性，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。</strong></li>\n<li><strong>由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。</strong></li>\n<li><strong>页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。</strong></li>\n</ol>\n<h2 id=\"内存分页\"><a class=\"anchor\" href=\"#内存分页\">#</a> 内存分页</h2>\n<p>在 Linux 下，每一页的大小为 4KB</p>\n<p><img data-src=\"b1c9ab095015145af4e420d401f5e10e.png\" alt=\"截图\" /></p>\n<h2 id=\"内存分段\"><a class=\"anchor\" href=\"#内存分段\">#</a> 内存分段</h2>\n<p><img data-src=\"505f014934e8bd3730a53baf3da58d3c.png\" alt=\"截图\" /></p>\n<h2 id=\"段页式内存\"><a class=\"anchor\" href=\"#段页式内存\">#</a> 段页式内存</h2>\n<p><img data-src=\"ab1468bc9813d44902b131553259f04c.png\" alt=\"截图\" /></p>\n<h2 id=\"linux内存\"><a class=\"anchor\" href=\"#linux内存\">#</a> Linux 内存</h2>\n<p><img data-src=\"1747399eeb06fb7901de17323539b8b5.png\" alt=\"截图\" /></p>\n<p>虽然每个进程都各自有独立的虚拟内存，但是每个虚拟内存中的内核地址，其实关联的都是相同的物理内存。这样，进程切换到内核态后，就可以很方便地访问内核空间内存</p>\n<p><img data-src=\"feda7e0fd68f52a80f47a2e0b7a80cdc.png\" alt=\"截图\" /></p>\n<ul>\n<li>代码段，包括二进制可执行代码；</li>\n<li>数据段，包括已初始化的静态常量和全局变量；</li>\n<li>BSS 段，包括未初始化的静态变量和全局变量；</li>\n<li>堆段，包括动态分配的内存，从低地址开始向上增长；</li>\n<li>文件映射段，包括动态库、共享内存等，从低地址开始向上增长</li>\n<li>栈段，包括局部变量和函数调用的上下文等。栈的大小固定</li>\n</ul>\n<h2 id=\"内存回收\"><a class=\"anchor\" href=\"#内存回收\">#</a> 内存回收</h2>\n<p><img data-src=\"d422671507c85bc8f23b03eb9f88166e.png\" alt=\"截图\" /></p>\n<h2 id=\"页面置换算法\"><a class=\"anchor\" href=\"#页面置换算法\">#</a> 页面置换算法</h2>\n<ul>\n<li><strong>Clock 页面置换算法（时钟页面置换算法）把所有的页面都保存在一个环形链表中，表针指向最老的页面。当发生缺页中断时，算法检查表针指向的页面：如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；然后将该页面淘汰，插入新页面</strong></li>\n<li><strong>OPT 页面置换算法（最佳页面置换算法） ：最佳 (Optimal, OPT) 置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。</strong></li>\n<li><strong>FIFO 页面置换算法（先进先出页面置换算法） : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</strong></li>\n<li><strong>LRU 页面置换算法（最近最久未使用页面置换算法） ：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</strong></li>\n<li><strong>LFU 页面置换算法（最少使用页面置换算法） : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</strong></li>\n</ul>\n<h2 id=\"lru算法改进\"><a class=\"anchor\" href=\"#lru算法改进\">#</a> LRU 算法改进</h2>\n<p>传统的 LRU 算法无法避免下面这两个问题：</p>\n<blockquote>\n<p><strong>预读失效导致缓存命中率下降<br />\n缓存污染导致缓存命中率下降</strong></p>\n</blockquote>\n<ul>\n<li>为了避免「预读失效」造成的影响</li>\n</ul>\n<p>Linux 操作系统实现两个了 LRU 链表：活跃 LRU 链表和非活跃 LRU 链表</p>\n<p>MySQL Innodb 存储引擎是一个 LRU 链表上划分来 2 个区域：young 区域 和 old 区域。</p>\n<p>预读页就只需要加入到非活跃链表头部，当页被真正访问的时候，才将页插入活跃链表头部，而将尾部的页降级为非活跃链表头部；如果预读的页一直没有被访问，就会从非活跃链表移除，这样就不会影响活跃链表中的热点数据。</p>\n<ul>\n<li>为了避免「缓存污染」造成的影响，提高了升级为热点数据的门槛：</li>\n</ul>\n<p>Linux 操作系统：在内存页被访问第二次的时候，将页从非活跃链表升级到活跃链表</p>\n<p>MySQL Innodb：在内存页被访问第二次的时候，进行停留在 old 区域的时间判断：</p>\n<blockquote>\n<p><strong>如果第二次的访问时间与第一次访问的时间在 1 秒内（默认值），那么该页就不会被从 old 区域升级到 young 区域</strong></p>\n<p><strong>如果第二次的访问时间与第一次访问的时间超过 1 秒，那么该页就会从 old 区域升级到 young 区域</strong></p>\n</blockquote>\n<h1 id=\"进程管理\"><a class=\"anchor\" href=\"#进程管理\">#</a> 进程管理</h1>\n<h2 id=\"进程和线程\"><a class=\"anchor\" href=\"#进程和线程\">#</a> 进程和线程</h2>\n<ul>\n<li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li>\n<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li>\n<li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li>\n<li>线程能减少并发执行的时间和空间开销；</li>\n<li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li>\n<li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li>\n<li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li>\n<li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li>\n</ul>\n<h2 id=\"进程状态\"><a class=\"anchor\" href=\"#进程状态\">#</a> 进程状态</h2>\n<p><img data-src=\"cc43f19d22fc56c1a3b852670cc83372.png\" alt=\"截图\" /></p>\n<ul>\n<li><strong>运行状态（Running）：该时刻进程占用 CPU；</strong></li>\n<li><strong>就绪状态（Ready）：可运行，由于其他进程处于运行状态而暂时停止运行；</strong></li>\n<li><strong>阻塞状态（Blocked）：该进程正在等待某一事件发生（如等待输入 / 输出操作的完成）而暂时停止运行，这时，即使给它 CPU 控制权，它也无法运行；</strong></li>\n<li><strong>创建状态（new）：进程正在被创建时的状态；</strong></li>\n<li><strong>结束状态（Exit）：进程正在从系统中消失时的状态；</strong></li>\n<li><strong>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</strong></li>\n<li><strong>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</strong></li>\n</ul>\n<h2 id=\"进程控制\"><a class=\"anchor\" href=\"#进程控制\">#</a> 进程控制</h2>\n<h3 id=\"pcb进程控制块\"><a class=\"anchor\" href=\"#pcb进程控制块\">#</a> PCB（进程控制块）</h3>\n<p>PCB 是进程存在的唯一标识</p>\n<ul>\n<li>\n<p>进程描述信息：</p>\n<p>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；</p>\n<p>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；</p>\n</li>\n<li>\n<p>进程控制和管理信息：</p>\n<p>进程当前状态，如 new、ready、running、waiting 或 blocked 等；</p>\n<p>进程优先级：进程抢占 CPU 时的优先级；</p>\n</li>\n<li>\n<p>资源分配清单：有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。</p>\n</li>\n<li>\n<p>CPU 相关信息：CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</p>\n</li>\n</ul>\n<h2 id=\"进程调度算法\"><a class=\"anchor\" href=\"#进程调度算法\">#</a> 进程调度算法</h2>\n<ul>\n<li>\n<p>先到先服务 (FCFS) 调度算法：从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</p>\n</li>\n<li>\n<p>短作业优先 (SJF) 调度算法：从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度</p>\n</li>\n<li>\n<p>高响应比优先 (HRRN) 调度算法：每次进行进程调度时，计算「响应比优先级」，把「响应比优先级」最高的进程投入运行，优先级 =(等待时间 + 要求服务时间)/ 要求服务时间</p>\n</li>\n<li>\n<p>时间片轮转 (RR) 调度算法：时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</p>\n</li>\n<li>\n<p>最高优先级调度 ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。</p>\n</li>\n<li>\n<p>多级反馈队列调度算法 ：</p>\n<p>设置了多个队列，赋予每个队列不同的优先级，每个队列优先级从高到低，同时优先级越高时间片越短；</p>\n<p>新进程会被放入到第一级队列的末尾，按先来先服务排队等待被调度，如果在第一级队列规定的时间片没运行完成，则转入到第二级队列的末尾，以此类推，直至完成；</p>\n<p>当较高优先级的队列为空，调度较低优先级的队列中的进程运行。进程运行时，有新进程进入较高优先级的队列，停止当前运行的进程并移入到原队列末尾，让较高优先级的进程运行；</p>\n</li>\n</ul>\n<h2 id=\"进程通信\"><a class=\"anchor\" href=\"#进程通信\">#</a> 进程通信</h2>\n<p>匿名管道 (Pipes) ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</p>\n<p>有名管道 (Named Pipes) : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循先进先出 (first in first out)。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</p>\n<p>信号 (Signal) ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</p>\n<p>消息队列 (Message Queuing) ：消息队列是消息的链表，具有特定的格式，存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道不同的是消息队列存放在内核中，只有在内核重启或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取。比 FIFO 更有优势。消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</p>\n<p>信号量 (Semaphores) ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</p>\n<p>共享内存 (Shared memory) ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</p>\n<p>套接字 (Sockets) : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</p>\n<h2 id=\"线程冲突\"><a class=\"anchor\" href=\"#线程冲突\">#</a> 线程冲突</h2>\n<p>锁 解决互斥问题</p>\n<p>信号量 解决互斥问题和同步问题</p>\n<h2 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h2>\n<h3 id=\"产生条件\"><a class=\"anchor\" href=\"#产生条件\">#</a> 产生条件</h3>\n<blockquote>\n<p><strong>互斥</strong></p>\n<p><strong>持有并等待</strong></p>\n<p><strong>不可剥夺</strong></p>\n<p><strong>循环等待</strong></p>\n</blockquote>\n<h3 id=\"解决方式\"><a class=\"anchor\" href=\"#解决方式\">#</a> 解决方式</h3>\n<blockquote>\n<p>预防：有序分配，静态分配</p>\n<p>避免：银行家算法</p>\n<p>检测：进程 - 资源分配图</p>\n<p>解除：杀死进程，抢占资源</p>\n</blockquote>\n<h1 id=\"文件系统\"><a class=\"anchor\" href=\"#文件系统\">#</a> 文件系统</h1>\n<h2 id=\"基本组成\"><a class=\"anchor\" href=\"#基本组成\">#</a> 基本组成</h2>\n<p><img data-src=\"69da5b519dab3f692378d7e11e9dfee2.png\" alt=\"截图\" /></p>\n<p><img data-src=\"bdffa32e767fdc739256a54c0550a126.png\" alt=\"截图\" /></p>\n<ul>\n<li>超级块，用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等</li>\n<li>索引节点区，用来存储索引节点</li>\n<li>数据块区，用来存储文件或目录数据</li>\n</ul>\n<h2 id=\"文件存储\"><a class=\"anchor\" href=\"#文件存储\">#</a> 文件存储</h2>\n<h3 id=\"索引方式\"><a class=\"anchor\" href=\"#索引方式\">#</a> 索引方式</h3>\n<p><img data-src=\"237d55c9ee85ea7f67c25d894d6053ec.png\" alt=\"截图\" /></p>\n<p>&lt;br/&gt;</p>\n<h3 id=\"存储结构\"><a class=\"anchor\" href=\"#存储结构\">#</a> 存储结构</h3>\n<p><img data-src=\"3112dbef2261170eb9ea93d8917268bc.png\" alt=\"截图\" /></p>\n<ul>\n<li>超级块，包含的是文件系统的重要信息，比如 inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等</li>\n<li>块组描述符，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」</li>\n<li>数据位图和 inode 位图， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。<br />\ninode 列表，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据</li>\n<li>数据块，包含文件的有用数据</li>\n</ul>\n<h2 id=\"文件io\"><a class=\"anchor\" href=\"#文件io\">#</a> 文件 IO</h2>\n<p><img data-src=\"64149890e7d2352e9c6d00296ff1f94c.png\" alt=\"截图\" /></p>\n<p>I/O 分为两个过程的：</p>\n<blockquote>\n<p>数据准备的过程<br />\n数据从内核空间拷贝到用户进程缓冲区的过程</p>\n</blockquote>\n<p>阻塞 I/O 阻塞在「过程 1 」和「过程 2」</p>\n<p>非阻塞 I/O 和基于非阻塞 I/O 的多路复用阻塞在「过程 2」</p>\n<p>异步 I/O 在「过程 1 」和「过程 2 」都不会阻塞</p>\n<h1 id=\"网络系统\"><a class=\"anchor\" href=\"#网络系统\">#</a> 网络系统</h1>\n<h2 id=\"网络传输\"><a class=\"anchor\" href=\"#网络传输\">#</a> 网络传输</h2>\n<h3 id=\"传统拷贝\"><a class=\"anchor\" href=\"#传统拷贝\">#</a> 传统拷贝</h3>\n<p><img data-src=\"9fb013bdbbf80a5259c47035f172f860.png\" alt=\"截图\" /></p>\n<h3 id=\"零拷贝\"><a class=\"anchor\" href=\"#零拷贝\">#</a> 零拷贝</h3>\n<p><img data-src=\"182081744abce78af7b790e71a1566e7.png\" alt=\"截图\" /></p>\n<p>零拷贝（Zero-copy）技术，因为我们没有在内存层面去拷贝数据，也就是说全程没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。</p>\n<p><img data-src=\"6738a5b5d1756b5272b416be3c131dec.png\" alt=\"1683564006371.png\" /></p>\n<h2 id=\"io多路复用\"><a class=\"anchor\" href=\"#io多路复用\">#</a> IO 多路复用</h2>\n<h3 id=\"selectpoll\"><a class=\"anchor\" href=\"#selectpoll\">#</a> select/poll</h3>\n<ul>\n<li>已连接的 Socket 都放到一个文件描述符集合，调用 select 函数将文件描述符集合拷贝到内核</li>\n<li>内核遍历文件描述符集合，当检查到有事件产生后，将此 Socket 标记为可读或可写，再把整个文件描述符集合拷贝回用户态</li>\n<li>用户态通过遍历的方法找到可读或可写的 Socket，然后处理</li>\n</ul>\n<h3 id=\"epoll\"><a class=\"anchor\" href=\"#epoll\">#</a> epoll</h3>\n<p><img data-src=\"4ed8729089682ebeb559a10533479965.png\" alt=\"截图\" /></p>\n<p>使用事件驱动机制，内核维护了一个链表记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，用户调用 epoll_wait () 函数时，返回有事件发生的文件描述符的个数</p>\n<h2 id=\"网络模式\"><a class=\"anchor\" href=\"#网络模式\">#</a> 网络模式</h2>\n<h3 id=\"reactor\"><a class=\"anchor\" href=\"#reactor\">#</a> Reactor</h3>\n<p>单 Reactor 单进程</p>\n<p><img data-src=\"21557e97899912aa1be0df34980f6462.png\" alt=\"截图\" /></p>\n<p>单 Reactor 多进程</p>\n<p><img data-src=\"65da303e36f2083abeb41b9064799cb6.png\" alt=\"截图\" /></p>\n<p>多 Reactor 多进程</p>\n<p><img data-src=\"39835bde9e939b9f917d9c6175b2e072.png\" alt=\"截图\" /></p>\n<h3 id=\"proactor\"><a class=\"anchor\" href=\"#proactor\">#</a> Proactor</h3>\n<p><img data-src=\"0a3c51901c46b3bc804d3e784a5009ce.png\" alt=\"截图\" /></p>\n<ul>\n<li>Proactor Initiator 负责创建 Proactor 和 Handler 对象，并将 Proactor 和 Handler 都通过 Asynchronous Operation Processor 注册到内核；</li>\n<li>Asynchronous Operation Processor 负责处理注册请求，并处理 I/O 操作；</li>\n<li>Asynchronous Operation Processor 完成 I/O 操作后通知 Proactor；</li>\n<li>Proactor 根据不同的事件类型回调不同的 Handler 进行业务处理；</li>\n<li>Handler 完成业务处理；</li>\n</ul>\n<h2 id=\"一致性哈希\"><a class=\"anchor\" href=\"#一致性哈希\">#</a> 一致性哈希</h2>\n<p>一致哈希算法是对 2^32 进行取模运算，是一个固定的值，将「存储节点」和「数据」都映射到一个首尾相连的哈希环上。</p>\n<p>映射的结果值往顺时针的方向的找到第一个节点，就是存储该数据的节点</p>\n<p><img data-src=\"960b4f5bfc7247a7aa2849de9798aead.png\" alt=\"截图\" />在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。</p>\n<p>一致性哈希算法虽然减少了数据迁移量，但是存在节点分布不均匀的问题</p>\n<h3 id=\"采用虚拟节点\"><a class=\"anchor\" href=\"#采用虚拟节点\">#</a> 采用虚拟节点</h3>\n<p><img data-src=\"ad77d7fcc911bb082f2aacca8ee95a7a.png\" alt=\"截图\" /></p>\n<p>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</p>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/CS/CN/",
            "url": "http://lovearrowshoot.github.io/CS/CN/",
            "title": "计算机网络",
            "date_published": "2023-06-30T02:28:44.000Z",
            "content_html": "<h1 id=\"概览\"><a class=\"anchor\" href=\"#概览\">#</a> 概览</h1>\n<h2 id=\"osi七层\"><a class=\"anchor\" href=\"#osi七层\">#</a> OSI 七层</h2>\n<p><img data-src=\"e5cc2ec24c7c16a6cfc681a74397658d.png\" alt=\"截图\" /></p>\n<h2 id=\"tcpip四层\"><a class=\"anchor\" href=\"#tcpip四层\">#</a> TCP/IP 四层</h2>\n<p>&lt;br/&gt;</p>\n<p><img data-src=\"a88a743fecfaba2c6b8d5572868ea7bf.png\" alt=\"截图\" /></p>\n<p><img data-src=\"f240919af7bce4548c7d26743d8d04a3.png\" alt=\"截图\" /></p>\n<h2 id=\"linux收发网络包\"><a class=\"anchor\" href=\"#linux收发网络包\">#</a> Linux 收发网络包</h2>\n<p><img data-src=\"9de0cde2635a37419b42d210d9e5ba9c.png\" alt=\"截图\" /></p>\n<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<p><img data-src=\"5a0a02eff508c20c0a9fcefadd8a639b.png\" alt=\"截图\" /></p>\n<h2 id=\"http和https\"><a class=\"anchor\" href=\"#http和https\">#</a> HTTP 和 HTTPS</h2>\n<h3 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h3>\n<p><img data-src=\"5210623e21a7d19888e8ff1eb4d3a792.png\" alt=\"截图\" /></p>\n<h3 id=\"安全性\"><a class=\"anchor\" href=\"#安全性\">#</a> 安全性</h3>\n<ul>\n<li>HTTP 由于是明文传输，所以安全上存在以下三个风险：</li>\n</ul>\n<p>窃听风险，比如通信链路上可以获取通信内容，用户号容易没。<br />\n篡改风险，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。<br />\n冒充风险，比如冒充淘宝网站，用户钱容易没。</p>\n<ul>\n<li>HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议，很好的解决了上述的风险：</li>\n</ul>\n<p>信息加密：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。<br />\n校验机制：无法篡改通信内容，篡改了就不能正常显示，<br />\n身份证书：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。</p>\n<ul>\n<li>HTTPS 是如何解决上面的三个风险的？</li>\n</ul>\n<p>混合加密的方式实现信息的机密性，解决了窃听的风险。<br />\n摘要算法的方式来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。<br />\n将服务器公钥放入到数字证书中，解决了冒充的风险。</p>\n<h2 id=\"http和rpc\"><a class=\"anchor\" href=\"#http和rpc\">#</a> HTTP 和 RPC</h2>\n<p><img data-src=\"116c8594ad1a761c4cc4b3f05f5a479f.png\" alt=\"1680879022830.png\" /></p>\n<h2 id=\"http和websocket\"><a class=\"anchor\" href=\"#http和websocket\">#</a> HTTP 和 WebSocket</h2>\n<p><img data-src=\"465a5c8838d49691d51aff84a273dbf3.png\" alt=\"1680881236879.png\" /></p>\n<h1 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h1>\n<h2 id=\"什么是-tcp\"><a class=\"anchor\" href=\"#什么是-tcp\">#</a> 什么是 TCP</h2>\n<p>TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。</p>\n<p>面向连接：一定是「一对一」才能连接，不能像 UDP 协议可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的；</p>\n<p>可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端；</p>\n<p>字节流：用户消息通过 TCP 协议传输时，消息可能会被操作系统「分组」成多个的 TCP 报文，如果接收方的程序如果不知道「消息的边界」，是无法读出一个有效的用户消息的。并且 TCP 报文是「有序的」，当「前一个」TCP 报文没有收到的时候，即使它先收到了后面的 TCP 报文，那么也不能扔给应用层去处理，同时对「重复」的 TCP 报文会自动丢弃。</p>\n<h2 id=\"tcp和udp区别\"><a class=\"anchor\" href=\"#tcp和udp区别\">#</a> TCP 和 UDP 区别</h2>\n<ul>\n<li>\n<h3 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h3>\n</li>\n</ul>\n<p>TCP 是面向连接的传输层协议，传输数据前先要建立连接。</p>\n<p>UDP 是不需要连接，即刻传输数据。</p>\n<ul>\n<li>\n<h3 id=\"服务对象\"><a class=\"anchor\" href=\"#服务对象\">#</a> 服务对象</h3>\n</li>\n</ul>\n<p>TCP 是一对一的两点服务，即一条连接只有两个端点。</p>\n<p>UDP 支持一对一、一对多、多对多的交互通信</p>\n<ul>\n<li>\n<h3 id=\"可靠性\"><a class=\"anchor\" href=\"#可靠性\">#</a> 可靠性</h3>\n</li>\n</ul>\n<p>TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按序到达。</p>\n<p>UDP 是尽最大努力交付，不保证可靠交付数据。但是我们可以基于 UDP 传输协议实现一个可靠的传输协议，比如 QUIC 协议</p>\n<ul>\n<li>\n<h3 id=\"拥塞控制-流量控制\"><a class=\"anchor\" href=\"#拥塞控制-流量控制\">#</a> 拥塞控制、流量控制</h3>\n</li>\n</ul>\n<p>TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。</p>\n<p>UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。</p>\n<ul>\n<li>\n<h3 id=\"首部开销\"><a class=\"anchor\" href=\"#首部开销\">#</a> 首部开销</h3>\n</li>\n</ul>\n<p>TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。</p>\n<p>UDP 首部只有 8 个字节，并且是固定不变的，开销较小。</p>\n<ul>\n<li>\n<h3 id=\"传输方式\"><a class=\"anchor\" href=\"#传输方式\">#</a> 传输方式</h3>\n</li>\n</ul>\n<p>TCP 是流式传输，没有边界，但保证顺序和可靠。</p>\n<p>UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。</p>\n<ul>\n<li>\n<h3 id=\"分片不同\"><a class=\"anchor\" href=\"#分片不同\">#</a> 分片不同</h3>\n</li>\n</ul>\n<p>TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。<br />\nUDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。</p>\n<ul>\n<li>\n<h3 id=\"用途\"><a class=\"anchor\" href=\"#用途\">#</a> 用途</h3>\n</li>\n</ul>\n<p>UDP 一般用于即时通信，如：语音、 视频 、直播等。对传输数据的准确性要求不是特别高</p>\n<p>TCP 用于对传输准确性要求特别高的场景，比如文件传输、发送和接收邮件、远程登录等</p>\n<h2 id=\"建立连接-2\"><a class=\"anchor\" href=\"#建立连接-2\">#</a> 建立连接</h2>\n<p><img data-src=\"8c8703ca0b8e5d500cc1e6293d912dda.png\" alt=\"截图\" /></p>\n<h2 id=\"连接断开\"><a class=\"anchor\" href=\"#连接断开\">#</a> 连接断开</h2>\n<p><img data-src=\"d1c4221d0e56d3e1ba738de31a19257e.png\" alt=\"截图\" /></p>\n<h2 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h2>\n<h3 id=\"窗口不变\"><a class=\"anchor\" href=\"#窗口不变\">#</a> 窗口不变</h3>\n<p><img data-src=\"738efe449c4379dc691d23cdb2dbc3da.png\" alt=\"截图\" /></p>\n<h3 id=\"窗口收缩\"><a class=\"anchor\" href=\"#窗口收缩\">#</a> 窗口收缩</h3>\n<p><img data-src=\"cbbd9e0fb129e5296244a0986a8377ec.png\" alt=\"截图\" /></p>\n<h2 id=\"拥塞控制\"><a class=\"anchor\" href=\"#拥塞控制\">#</a> 拥塞控制</h2>\n<h3 id=\"超时重传\"><a class=\"anchor\" href=\"#超时重传\">#</a> 超时重传</h3>\n<p><img data-src=\"cbf8ac74aaf1cc37dcd1bd95bb114506.png\" alt=\"截图\" /></p>\n<h3 id=\"快速重传\"><a class=\"anchor\" href=\"#快速重传\">#</a> 快速重传</h3>\n<ul>\n<li>拥塞窗口 cwnd = ssthresh + 3 （ 3 的意思是确认有 3 个数据包被收到了）；</li>\n<li>重传丢失的数据包；</li>\n<li>如果再收到重复的 ACK，那么 cwnd 增加 1；</li>\n<li>如果收到新数据的 ACK 后，把 cwnd 设置为第一步中的 ssthresh 的值，原因是该 ACK 确认了新的数据，说明从 duplicated ACK 时的数据都已收到，该恢复过程已经结束，可以回到恢复之前的状态了</li>\n</ul>\n<p><img data-src=\"82403576c1b1de38b6c19a15555ea869.png\" alt=\"截图\" /></p>\n<h1 id=\"ip\"><a class=\"anchor\" href=\"#ip\">#</a> IP</h1>\n<h2 id=\"ip地址\"><a class=\"anchor\" href=\"#ip地址\">#</a> IP 地址</h2>\n<h3 id=\"地址分类\"><a class=\"anchor\" href=\"#地址分类\">#</a> 地址分类</h3>\n<p><img data-src=\"ad4bf54e48d36971ce20b27cf41c3c25.png\" alt=\"截图\" /></p>\n<p><img data-src=\"ca4c77756f9b57e1862a5e697c394f82.png\" alt=\"截图\" /></p>\n<h3 id=\"路由控制\"><a class=\"anchor\" href=\"#路由控制\">#</a> 路由控制</h3>\n<p><img data-src=\"775c122015479069e42fbba3db912303.png\" alt=\"截图\" /></p>\n<h2 id=\"ip协议\"><a class=\"anchor\" href=\"#ip协议\">#</a> IP 协议</h2>\n<h3 id=\"arp协议\"><a class=\"anchor\" href=\"#arp协议\">#</a> ARP 协议</h3>\n<p>在一个数据链路中通过 IP 地址获得其他设备的 MAC 地址</p>\n<p><img data-src=\"863159c1fbcd1aabf70e3a1e135a6360.png\" alt=\"截图\" /></p>\n<h3 id=\"dhcp协议\"><a class=\"anchor\" href=\"#dhcp协议\">#</a> DHCP 协议</h3>\n<p>在数据链路中实现统一分配和管理 IP 地址</p>\n<p><img data-src=\"8b9f2bbf860bbda43c0f8dfcbbe421a7.png\" alt=\"截图\" /></p>\n<h3 id=\"napt协议\"><a class=\"anchor\" href=\"#napt协议\">#</a> NAPT 协议</h3>\n<p>将不同的私有 IP 地址转换为公有 IP 地址 + 端口号</p>\n<p><img data-src=\"82e271e03fb555a19ab029ef6b294dfb.png\" alt=\"截图\" /></p>\n<h3 id=\"icmp协议\"><a class=\"anchor\" href=\"#icmp协议\">#</a> ICMP 协议</h3>\n<p>确认 IP 包是否送达目标地址、报告发送过程 IP 包被废弃的原因和改善网络设置等</p>\n<p><img data-src=\"d1b6c1dff65f4f2c3a62342a831627dc.png\" alt=\"截图\" /></p>\n<p><img data-src=\"7c40e03f2c09fdef14b3e54783c8b541.png\" alt=\"截图\" /></p>\n",
            "tags": [
                "计算机科学",
                "计算机科学"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/cpp/C++11%E7%89%B9%E8%89%B2/",
            "url": "http://lovearrowshoot.github.io/cpp/C++11%E7%89%B9%E8%89%B2/",
            "title": "C++11特色",
            "date_published": "2023-06-29T16:07:23.000Z",
            "content_html": "<h2 id=\"右值引用\"><a class=\"anchor\" href=\"#右值引用\">#</a> 右值引用</h2>\n<h3 id=\"万能引用\"><a class=\"anchor\" href=\"#万能引用\">#</a> 万能引用</h3>\n<p>根据传入变量的类型决定是左 / 右值引用</p>\n<p>常见场景   函数模板的参数 T&amp;&amp;   auto &amp;&amp;</p>\n<h3 id=\"引用折叠\"><a class=\"anchor\" href=\"#引用折叠\">#</a> 引用折叠</h3>\n<p>引用的引用一般只会在类型别名或者模板类型参数中出现</p>\n<p>除了右值引用的右值引用，其他引用的引用都会折叠为左值引用</p>\n<h3 id=\"完美转发\"><a class=\"anchor\" href=\"#完美转发\">#</a> 完美转发</h3>\n<p>当我们将一个右值引用传入函数时，他在实参中有了命名，所以继续往下传或者调用其他函数时，根据 C++ 标准的定义，这个参数变成了一个左值。那么他永远不会调用接下来函数的右值版本，这可能在一些情况下造成拷贝。为了解决这个问题 C++ 11 引入了完美转发，根据右值判断的推导，调用 forward 传出的值，若原来是一个右值，那么他转出来就是一个右值，否则为一个左值。<br />\n这样的处理就完美的转发了原有参数的左右值属性，不会造成一些不必要的拷贝。</p>\n<p><strong>对于右值引用使用 std::move，对于万能引用使用 std::forward</strong></p>\n<p>std::move 对于一个本身是左值的右值引用变量需要绑定到一个右值上\t, 即将左值强制转换为右值</p>\n<p>std::forward 如果一个本身是左值的万能引用如果绑定在了一个右值上面，就把它重新转换为右值</p>\n",
            "tags": [
                "C++",
                "C++"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/Algorithms/ACM/",
            "url": "http://lovearrowshoot.github.io/Algorithms/ACM/",
            "title": "ACM常用输入输出",
            "date_published": "2022-04-30T12:46:25.000Z",
            "content_html": "<h1 id=\"构建链表\"><a class=\"anchor\" href=\"#构建链表\">#</a> 构建链表</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 节点值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 下一个节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ListNode<span class=\"token operator\">*</span> <span class=\"token function\">getListNodemy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> dumyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> dumyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> nums <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        dumyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        dumyHead <span class=\"token operator\">=</span> dumyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> ptr<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"构建二叉树\"><a class=\"anchor\" href=\"#构建二叉树\">#</a> 构建二叉树</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 根据数组构造二叉树</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">construct_binary_tree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">vecTree</span> <span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        vecTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vecTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            vecTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> vecTree<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            vecTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> vecTree<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 层序打印二叉树</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_binary_tree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> que<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>que<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            que<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                que<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// 这里的处理逻辑是为了把 null 节点打印出来，用 - 1 表示 null</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">else</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"循环输入\"><a class=\"anchor\" href=\"#循环输入\">#</a> 循环输入</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "算法"
            ]
        },
        {
            "id": "http://lovearrowshoot.github.io/Algorithms/%E7%AE%97%E6%B3%95/",
            "url": "http://lovearrowshoot.github.io/Algorithms/%E7%AE%97%E6%B3%95/",
            "title": "常见算法",
            "date_published": "2022-04-30T12:46:25.000Z",
            "content_html": "<h1 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h1>\n<p><img data-src=\"adbbe4d16bfa571d144a00d4468b9c7d.png\" alt=\"截图\" /></p>\n<h2 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token comment\">// 随机选取哨兵并放到数组末尾</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> left<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pivot <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在当前子数组中确保 i 左边的都比哨兵小，j 右边的都比哨兵大</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> j <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token comment\">// 此时 i 的位置是从左往右第一个比哨兵大的位置，也就是哨兵应该存在的位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token comment\">// 递归逐渐排序左右</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token function\">qsort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"桶排序\"><a class=\"anchor\" href=\"#桶排序\">#</a> 桶排序</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小根堆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ListNode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token function\">Heap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ListNode<span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 进行下浮</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    minIndex <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    minIndex <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minIndex <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    parent <span class=\"token operator\">=</span> minIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 将堆顶弹出</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> ListNode <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            ListNode ans <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//size 表示此时的大小</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 将元素放入堆尾，随后进行上浮</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ListNode node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            ListNode tmp <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自顶向下递归归并</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">==</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 找到链表中点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> mid <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 递归拆分链表</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sortList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> head2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>temp1 <span class=\"token operator\">=</span> head1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>temp2 <span class=\"token operator\">=</span> head2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 根据大小决定位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;=</span> temp2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                temp1 <span class=\"token operator\">=</span> temp1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                temp2 <span class=\"token operator\">=</span> temp2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 当有一边链表为空时，直接接入到新链表尾部</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            temp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h1>\n<p><img data-src=\"00ae8b176c46db6491cdaf3aeaf76bf3.png\" alt=\"1681010746528.png\" /></p>\n<h1 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<h2 id=\"旋转字符串左旋转n位\"><a class=\"anchor\" href=\"#旋转字符串左旋转n位\">#</a> 旋转字符串（左旋转 n 位）</h2>\n<p><strong>右旋转顺序为 312</strong></p>\n<ol>\n<li>反转区间为前 n 的子串</li>\n<li>反转区间为 n 到末尾的子串</li>\n<li>反转整个字符串</li>\n</ol>\n<h2 id=\"kmp算法\"><a class=\"anchor\" href=\"#kmp算法\">#</a> KMP 算法</h2>\n<h3 id=\"前缀表\"><a class=\"anchor\" href=\"#前缀表\">#</a> 前缀表</h3>\n<blockquote>\n<p><strong>前缀表是用来回退的，它记录了模式串与主串 (文本串) 不匹配的时候，模式串应该从哪里开始重新匹配</strong></p>\n<p><strong>前缀表记录下标 i 之前（包括 i）的字符串中，有多大长度的相同前缀后缀</strong></p>\n<p><strong>找到了最长相等的前缀和后缀，匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面重新匹配就可以了。所以前缀表具有告诉我们当前位置匹配失败，跳到之前已经匹配过的地方的能力</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构建前缀表，即 next 数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//j 指向前缀末尾，i 指向后缀末尾</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token comment\">// 找前一位的对应的回退位置了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 在 haystack 字符串中查找 needle 字符串第一次出现的位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h1>\n<h2 id=\"递归函数什么时候需要返回值\"><a class=\"anchor\" href=\"#递归函数什么时候需要返回值\">#</a> 递归函数什么时候需要返回值</h2>\n<blockquote>\n<p><strong>搜索整棵二叉树且不用处理递归返回值 不需要</strong></p>\n<p><strong>搜索整棵二叉树且需要处理递归返回值  需要</strong></p>\n<p><strong>搜索其中一条边 需要</strong></p>\n</blockquote>\n<h2 id=\"二叉树的统一迭代法\"><a class=\"anchor\" href=\"#二叉树的统一迭代法\">#</a> 二叉树的统一迭代法</h2>\n<blockquote>\n<p><strong>根据遍历的顺序，修改代码的顺序即可</strong></p>\n<p><strong>中序遍历的入栈顺序采用 右中空左 则出栈顺序为左中空右</strong></p>\n<p><strong>后序遍历的入栈顺序采用 中空右左 则出栈顺序为左右中</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 只需改变下面四行代码的顺序即可实现不同的遍历</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加右节点（空节点不入栈）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 添加左节点（空节点不入栈）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 添加中节点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 将空节点弹出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                node <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 重新取出栈中元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加入到结果集</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二叉树的递归层序遍历\"><a class=\"anchor\" href=\"#二叉树的递归层序遍历\">#</a> 二叉树的递归层序遍历</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 二级链表，每一个元素存储每一层元素所组成的链表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> resList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">checkFun</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> resList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 递归方式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkFun</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> deep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        deep<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 防止创建多余的层级链表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> deep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 当层级增加时，list 的 Item 的长度也增加，利用 list 的索引值进行层级界定</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            resList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 将这一层的结点放入当前层的链表中</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        resList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>deep <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 进入下一层</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">checkFun01</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> deep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">checkFun01</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> deep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"遍历序列构造二叉树\"><a class=\"anchor\" href=\"#遍历序列构造二叉树\">#</a> 遍历序列构造二叉树</h2>\n<h3 id=\"中序与后序\"><a class=\"anchor\" href=\"#中序与后序\">#</a> 中序与后序</h3>\n<p>以 后序数组的最后一个元素为切割点，先切中序数组，根据中序数组，反过来再切后序数组。一层一层切下去，每次后序数组最后一个元素就是节点元素。</p>\n<h3 id=\"前序与中序\"><a class=\"anchor\" href=\"#前序与中序\">#</a> 前序与中序</h3>\n<p>以 前序数组的第一个元素为切割点，先切中序数组，根据中序数组，反过来再切后序数组。一层一层切下去，每次前序数组第一个元素就是节点元素。</p>\n<h1 id=\"回溯算法\"><a class=\"anchor\" href=\"#回溯算法\">#</a> 回溯算法</h1>\n<blockquote>\n<p>组合问题：N 个数里面按一定规则找出 k 个数的集合<br />\n切割问题：一个字符串按一定规则有几种切割方式<br />\n子集问题：一个 N 个数的集合里有多少符合条件的子集<br />\n排列问题：N 个数按一定规则全排列，有几种排列方式<br />\n棋盘问题：N 皇后，解数独等等</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>终止条件<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        存放结果<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    处理节点<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span>路径，选择列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    回溯，撤销处理结果</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>for 循环横向遍历，递归纵向遍历，回溯不断调整结果集</strong></p>\n<p><strong>横向遍历调整选取的位置  纵向遍历调整选取的数量</strong> <strong>第 n 层则表示调整第 n 个选取的位置</strong></p>\n<p><strong>去重：树枝去重  树层去重 (常用)</strong></p>\n<p><strong>used 数组为 1 表示树枝用过，反之则是树层用过</strong></p>\n</blockquote>\n<h2 id=\"组合总和有重复元素且一个元素只能使用一次\"><a class=\"anchor\" href=\"#组合总和有重复元素且一个元素只能使用一次\">#</a> 组合总和 (有重复元素，且一个元素只能使用一次)</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">combinationSum2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> candidates<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    used <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>candidates<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 加标志数组，用来辅助判断同层节点是否已经遍历</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 为了将重复的数字都放到一起，所以先进行排序</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">backTracking</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">backTracking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> candidates<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> candidates<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 出现重复节点，同层的第一个节点已经被访问过，所以直接跳过</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> candidates<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      sum <span class=\"token operator\">+=</span> candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 每个节点仅能选择一次，所以从下一位开始</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">backTracking</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      sum <span class=\"token operator\">-=</span> candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      path<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"全排列有重复元素\"><a class=\"anchor\" href=\"#全排列有重复元素\">#</a> 全排列 (有重复元素)</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 存放结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 暂存结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">permuteUnique</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">backTrack</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">backTrack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> used<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//used [i - 1] == true，说明同⼀树⽀ nums [i - 1] 使⽤过</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//used [i - 1] == false，说明同⼀树层 nums [i - 1] 使⽤过</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 如果同⼀树层 nums [i - 1] 使⽤过则直接跳过</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> used<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 如果同⼀树⽀ nums [i] 没使⽤过开始处理</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记同⼀树⽀ nums [i] 使⽤过，防止同一树枝重复使用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                path<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">backTrack</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 回溯，说明同⼀树层 nums [i] 使⽤过，防止下一树层重复</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 回溯</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分割字符串看分割的子串是否在单词表\"><a class=\"anchor\" href=\"#分割字符串看分割的子串是否在单词表\">#</a> 分割字符串，看分割的子串是否在单词表</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">wordBreak</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> wordDict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 记忆数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>wordDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startIndex <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 避免再次从这个地方开始截取子串匹配，节约时间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startIndex<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">String</span> sub <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>startIndex<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t        <span class=\"token comment\">// 拆分出来的单词无法匹配，继续切割</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">boolean</span> res <span class=\"token operator\">=</span> <span class=\"token function\">backtracking</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 这里是关键，找遍了 startIndex~s.length () 也没能匹配单词表，标记从 startIndex 开始不能找到</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        memo<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二维递归-解数独\"><a class=\"anchor\" href=\"#二维递归-解数独\">#</a> 二维递归 解数独</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">solveSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">solveSudokuHelper</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">solveSudokuHelper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//「一个 for 循环遍历棋盘的行，一个 for 循环遍历棋盘的列，</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 一行一列确定下来之后，递归遍历这个位置放 9 个数字的可能性！」</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 跳过原始数字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> k <span class=\"token operator\">=</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// (i, j) 这个位置放 k 是否合适</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">solveSudokuHelper</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果找到合适一组立刻返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 9 个数都试完了，都不行，那么就返回 false</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 遍历完没有返回 false，说明找到了合适棋盘位置了</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 判断棋盘是否合法有如下三个维度:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *     同行是否重复</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *     同列是否重复</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     *     9 宫格里是否重复</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 同行是否重复</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 同列是否重复</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 9 宫格里是否重复</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span> startRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> startCol <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>col <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> startRow<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> startRow <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> startCol<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> startCol <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"岛屿问题通解\"><a class=\"anchor\" href=\"#岛屿问题通解\">#</a> 岛屿问题通解</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 判断 base case</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 如果这个格子不是岛屿，直接返回</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    grid<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将格子标记为「已遍历过」</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 访问上、下、左、右四个相邻结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 判断坐标 (r, c) 是否在网格中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">inArea</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> r <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">.</span>length </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        \t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h1>\n<blockquote>\n<ol>\n<li><strong>确定 dp 数组（dp table）以及下标的含义</strong></li>\n<li><strong>确定递推公式</strong></li>\n<li><strong>dp 数组如何初始化</strong></li>\n<li><strong>确定遍历顺序</strong></li>\n<li><em><strong>举例推导 dp 数组</strong></em></li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>求装满背包有几种方法   dp [j] += dp [j - nums [i]]</strong></p>\n<p><strong>求组合数就是外层 for 遍历物品，内层 for 遍历背包</strong></p>\n<p><strong>求排列数就是外层 for 遍历背包，内层 for 遍历物品</strong></p>\n<p><strong>求背包的最大价值   dp [j] = max (dp [j], dp [j - weight [i]] + value [i])</strong></p>\n<p><strong>求装满背包所需的最少物品   dp [j] = min (dp [j - coins [i]] + 1, dp [j])</strong></p>\n</blockquote>\n<h2 id=\"01背包\"><a class=\"anchor\" href=\"#01背包\">#</a> 01 背包</h2>\n<h3 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> bagSize <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">testWeightBagProblem</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>bagSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 动态规划获得结果</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param weight  物品的重量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param value   物品的价值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param bagSize 背包的容量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testWeightBagProblem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bagSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建 dp 数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> goods <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取物品的数量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>goods<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bagSize <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 初始化 dp 数组</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 创建数组后，其中默认的值就是 0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> bagSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 先遍历物品，再遍历背包重量</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> bagSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                     <span class=\"token comment\">// 当前背包的容量都没有当前物品 i 大的时候，是不放物品 i 的</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                     <span class=\"token comment\">// 那么前 i-1 个物品能放下的最大价值就是当前情况的最大价值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    当前背包的容量可以放下物品 i</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    那么此时分两种情况：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                      1、不放物品 i（放不下）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        由 dp [i - 1][j] 推出，即背包容量为 j，里面不放物品 i 的最大价值，此时 dp [i][j] 就是 dp [i - 1][j]</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                      2、放物品 i </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        由 dp [i - 1][j - weight [i]] 推出，再加上当前物品的价值</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    比较这两种情况下，哪种背包中物品的最大价值最大</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"滚动数组\"><a class=\"anchor\" href=\"#滚动数组\">#</a> 滚动数组</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> bagWight <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">testWeightBagProblem</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> bagWight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testWeightBagProblem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bagWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> wLen <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 定义 dp 数组：dp [j] 表示背包容量为 j 时，能获得的最大价值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bagWeight <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 如果先遍历背包容量，那么每个 dp [j] 就只会放入一个物品</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    顺序遍历</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    在执行第 i 次循环时，背包容量按照 0..bagWight 的顺序遍历一遍，来检测第 i 件物品是否能放</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    在执行第 i 次循环且背包容量为 v 时，此时的 f [v] 存储的是 f [i - 1][v]，但此时 f [v-weight [i]] 存储的是 f [i][v-weight [i]]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    则第 i 次循环中，执行背包容量为 v 时，容量为 v - weight [i] 的背包已经计算过，已经不是二维数组中上一层的数组</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    不符合状态转移方程，所以应倒序遍历</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> wLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> bagWeight<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"完全背包\"><a class=\"anchor\" href=\"#完全背包\">#</a> 完全背包</h2>\n<blockquote>\n<p><strong>将 01 背包中的倒序遍历修改为正序遍历即可</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCompletePack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> bagWeight <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bagWeight <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>          <span class=\"token comment\">// 遍历物品</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> bagWeight<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历背包容量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"多重背包\"><a class=\"anchor\" href=\"#多重背包\">#</a> 多重背包</h2>\n<blockquote>\n<p>将 01 背包的物品数量展开或者再加一个 for 循环遍历数量</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">MultiPack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 版本一：改变物品数量为 01 背包格式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> weight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> bagWeight <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 把物品展开为 i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            weight<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            value<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            nums<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bagWeight <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历物品</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> bagWeight<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> weight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历背包容量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 版本二：改变遍历个数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> bagWeight <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bagWeight <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> weight<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历物品</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> bagWeight<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历背包容量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 以上为 01 背包，然后加一个遍历个数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历个数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> k <span class=\"token operator\">*</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"股票问题\"><a class=\"anchor\" href=\"#股票问题\">#</a> 股票问题</h2>\n<h3 id=\"最多进行k次交易\"><a class=\"anchor\" href=\"#最多进行k次交易\">#</a> 最多进行 k 次交易</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// [天数][股票状态]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 股票状态：奇数表示第 k 次交易持有 / 买入，偶数表示第 k 次交易不持有 / 卖出，0 表示没有操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//dp 数组的初始化，与版本一同理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"买卖含有冷冻期\"><a class=\"anchor\" href=\"#买卖含有冷冻期\">#</a> 买卖含有冷冻期</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//dp [i][0]: 手上持有股票的最大收益</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//dp [i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//dp [i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数位dp\"><a class=\"anchor\" href=\"#数位dp\">#</a> 数位 DP</h2>\n<h3 id=\"给定正整数-n返回在-1-n-范围内具有-至少-1-位-重复数字的正整数的个数\"><a class=\"anchor\" href=\"#给定正整数-n返回在-1-n-范围内具有-至少-1-位-重复数字的正整数的个数\">#</a> 给定正整数 n，返回在 [1, n] 范围内具有 至少 1 位 重复数字的正整数的个数</h3>\n<p><img data-src=\"21f80965f8733ca6565e119c164d4b1f.png\" alt=\"1679292986142.png\" /></p>\n<p><img data-src=\"8d4ab4d82d666fc73db6156bdbd518b7.png\" alt=\"1679293175710.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numDupDigitsAtMostN</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-1 表示没有计算过</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 计算没有出现重复数字的数目</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 当前需要填入第 i 位，前面填入的数字与 n 对应位置的数字不相同，需要求得的不重复数字的正整数数量只与 mask 相关，用 dp 数组记录</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isLimit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> isNum <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//isNum 为 true 表示得到了一个合法数字</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 该组合已经出现过</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLimit <span class=\"token operator\">&amp;&amp;</span> isNum <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isNum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以跳过当前数位，计算下一数位</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           res <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 如果前面填的数字都和 n 的一样，那么这一位至多填数字 s [i]（否则就超过 n 啦)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> up <span class=\"token operator\">=</span> isLimit <span class=\"token operator\">?</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> isNum <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">&lt;=</span> up<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 枚举要填入的数字 d</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mask <span class=\"token operator\">>></span> d <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//d 不在 mask 中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 将该数位放入集合中，并计算下一个数位</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                res <span class=\"token operator\">+=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mask <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> isLimit <span class=\"token operator\">&amp;&amp;</span> d <span class=\"token operator\">==</span> up<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isLimit <span class=\"token operator\">&amp;&amp;</span> isNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"一致性哈希分布式系统\"><a class=\"anchor\" href=\"#一致性哈希分布式系统\">#</a> 一致性哈希 (分布式系统)</h1>\n<p>一致哈希算法是对 2^32 进行取模运算，是一个固定的值，将「存储节点」和「数据」都映射到一个首尾相连的哈希环上。</p>\n<p>映射的结果值往顺时针的方向的找到第一个节点，就是存储该数据的节点</p>\n<p><img data-src=\"960b4f5bfc7247a7aa2849de9798aead.png\" alt=\"截图\" />在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。</p>\n<p>一致性哈希算法虽然减少了数据迁移量，但是存在节点分布不均匀的问题</p>\n<h2 id=\"采用虚拟节点\"><a class=\"anchor\" href=\"#采用虚拟节点\">#</a> 采用虚拟节点</h2>\n<p><img data-src=\"ad77d7fcc911bb082f2aacca8ee95a7a.png\" alt=\"截图\" /></p>\n<p>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</p>\n",
            "tags": [
                "算法",
                "算法"
            ]
        }
    ]
}